"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[526],{4321:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var i=t(7462),a=t(3366),s=(t(7294),t(3905)),o=["components"],r={id:"molecule",title:"Use Molecule Serialization System",sidebar_position:6},l=void 0,c={unversionedId:"molecule",id:"molecule",isDocsHomePage:!1,title:"Use Molecule Serialization System",description:"Felix bot reply the transaction hash and a json file named UnsignedTx.json",source:"@site/docs/felixbot-confirm-message.md",sourceDirName:".",slug:"/molecule",permalink:"/implement-dapp-docs/molecule",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/felixbot-confirm-message.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"molecule",title:"Use Molecule Serialization System",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Felix bot DApp demo",permalink:"/implement-dapp-docs/felix-bot"},next:{title:"Conclusion",permalink:"/implement-dapp-docs/conclusion"}},u=[{value:"Use molecule serialization implementations for serialized <code>UnsignedTx</code>",id:"use-molecule-serialization-implementations-for-serialized-unsignedtx",children:[{value:"Create a schema file",id:"create-a-schema-file",children:[]},{value:"Compile the schema to <code>UnsignedTransaction.umd.js</code> file",id:"compile-the-schema-to-unsignedtransactionumdjs-file",children:[]},{value:"Transform plain JavaScript object  to another JavaScript object which can be serialized by moleculec-es",id:"transform-plain-javascript-object--to-another-javascript-object-which-can-be-serialized-by-moleculec-es",children:[]},{value:"Generate serialized ArrayBuffer data in molecule format",id:"generate-serialized-arraybuffer-data-in-molecule-format",children:[]},{value:"download the serializedUnsignedTx json file",id:"download-the-serializedunsignedtx-json-file",children:[]}]},{value:"Use molecule deserialization implementations for serialized <code>UnsignedTx</code>",id:"use-molecule-deserialization-implementations-for-serialized-unsignedtx",children:[{value:"Use molecule deserialization implementations to deserialize UnsignedTx data",id:"use-molecule-deserialization-implementations-to-deserialize-unsignedtx-data",children:[]},{value:"Generate  the signing message",id:"generate--the-signing-message",children:[]}]},{value:"\u601d\u8003\uff1a",id:"\u601d\u8003",children:[]}],p={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Felix bot reply the transaction hash and a json file named ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTx.json"),"\nso, what is the ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTx.json")," file used for?"),(0,s.kt)("p",null,"\u5982\u679c\u4f60\u6253\u5f00 ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTx.json")," \u4f1a\u53d1\u73b0\u91cc\u9762\u662f 0x \u5f00\u5934\u7684\u6570\u636e\uff0c\u662f\u628a UnsignedTransaction info \u5e8f\u5217\u5316\u540e\u751f\u6210\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u6570\u636e\u901a\u8fc7\u53e6\u4e00\u4e2a\u5de5\u5177  ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/zengbing15/generate-message-tool"},"generate-message-tool")," \u80fd\u591f deserialization \u51fa\u539f\u672c\u7684 transaction\uff0c\u5e76\u80fd\u901a\u8fc7 transaction \u751f\u6210 txSkeleton, \u6700\u7ec8\u901a\u8fc7 txSkeleton.signingEntries \u7684  message \u548c  felix bot reply \u7684 signing message \u8fdb\u884c\u6bd4\u5bf9\uff0c\u5982\u679c\u65e0\u8bef\uff0c\u5219\u8bc1\u660e offline signing \u6ca1\u6709\u95ee\u9898, It could be used in a place where the highest level security is required. "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u662f\u975e\u5e38\u901a\u7528\u7684\u529f\u80fd\uff0c\u5728\u7f51\u7edc\u4f20\u8f93\uff0c\u6570\u636e\u5b58\u50a8\u4e0a\u90fd\u6781\u5176\u5e38\u7528\u3002\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u901a\u7528\u89e3\u91ca\u662f\uff1aseriallization \u5e8f\u5217\u5316 \uff1a \u5c06\u5bf9\u8c61\u8f6c\u5316\u4e3a\u4fbf\u4e8e\u4f20\u8f93\u7684\u683c\u5f0f\uff0c \u5e38\u89c1\u7684\u5e8f\u5217\u5316\u683c\u5f0f\uff1a\u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u5b57\u8282\u6570\u7ec4\uff0cjson\u5b57\u7b26\u4e32\uff0cxml\u5b57\u7b26\u4e32\u3002\ndeseriallization \u53cd\u5e8f\u5217\u5316\uff1a\u5c06\u5e8f\u5217\u5316\u7684\u6570\u636e\u6062\u590d\u4e3a\u5bf9\u8c61\u7684\u8fc7\u7a0b\u3002")),(0,s.kt)("p",null,"\u8fd9\u91cc\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u683c\u5f0f\u662f Molecule \uff0csee ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0008-serialization/0008-serialization.md"},"RFC:Serialization")," , molecule \u662f CKB \u5e7f\u6cdb\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u683c\u5f0f \uff0cwitness \u5c31\u662f\u7528 molecule \u5e8f\u5217\u5316\u7684\uff08",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb/pull/1739"},"feat: use molecule to serialize"),"\uff09 Molecule is a canonicalization and zero-copy serialization format and Molecule \u80fd\u591f\u6781\u5927\u5730\u51cf\u5c11\u5185\u5b58\u6d88\u8017\uff0c",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork"},"nervosnetwork"),"/",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/moleculec-es"},"moleculec-es")," \u662f ECMAScript plugin for the molecule serialization system\uff0c\u5b9e\u73b0 Confirm signing message \u529f\u80fd\u4f1a\u4f7f\u7528 ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/moleculec-es"},"moleculec-es")," . \u4e4b\u540e\u4f60\u4f1a\u66f4\u52a0\u7406\u89e3 molecule format ,\u4ee5\u53ca  molecule serialization implementations \u548c deserialization implementations."),(0,s.kt)("h2",{id:"use-molecule-serialization-implementations-for-serialized-unsignedtx"},"Use molecule serialization implementations for serialized ",(0,s.kt)("inlineCode",{parentName:"h2"},"UnsignedTx")),(0,s.kt)("h3",{id:"create-a-schema-file"},"Create a schema file"),(0,s.kt)("p",null,"An unsigned transaction is described via the following molecule formatted ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTransaction")," data structure, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0008-serialization/0008-serialization.md"},"RFC: Serialization")," for more information about molecule format. \u5b8c\u6574\u7684 schema file \u5728 github link. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\n......\nstruct SighashAllSigning {\n    signing_script: Script,\n}\n\n\nunion SigningMethods {\n    SighashAllSigning,\n}\n\ntable UnsignedTransaction {\n    signing_method: SigningMethods,\n    tx: Transaction,\n    input_txs: TransactionVec,\n    cell_dep_txs: TransactionVec,\n    headers: HeaderVec,\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTx")," object \u7531\u4ee5\u4e0b\u7ec4\u6210\uff1a  "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"signing_method"),"\uff1aSighashAllSigning which is the default signing solution used in CKB now.\u4e5f\u5c31\u662f\u4f7f\u7528 secp256k1"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"tx:"),"\u53d1\u9001\u7ea2\u5305\u7684\u5b8c\u6574\u4ea4\u6613"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"input_txs"),"\uff1agiven a single input cell is not enough to validate the input cell is correct, we will need the full transaction, so the offline signer can validate the correctness of input cells"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cell_dep_txs"),":   \u4e0e input_txs \u4e00\u6837\uff0cgiven a single cell_dep is not enough to validate the cell_dep is correct, we will need the full transaction"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"headers"),": INPUT_TX \u6240\u5728\u7684 block header ")),(0,s.kt)("h3",{id:"compile-the-schema-to-unsignedtransactionumdjs-file"},"Compile the schema to ",(0,s.kt)("inlineCode",{parentName:"h3"},"UnsignedTransaction.umd.js")," file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ git clone https://github.com/nervosnetwork/moleculec-es.git\n$ cd moleculec-es\n$ `cargo install moleculec`\n`$ moleculec ``--``language ``-`` ``--``schema``-``file ``"your schema file"`` ``--``format json ``>`` ``/tmp/``schema``.``json`\n`$ moleculec``-``es ``-``hasBigInt ``-``inputFile ``/``tmp``/``schema``.``json ``-``outputFile ``"your JS file"`\n`$ rollup ``-``f umd ``-``n bundle ``-``i ``UnsignedTransaction``.``js ``-``o ``UnsignedTransaction``.``umd``.``js ``// molecule-es \u751f\u6210\u7684 esm \u683c\u5f0f\uff0c\u8981\u8f6c\u6210 umd \u683c\u5f0f\u624d\u80fd\u7ed9 node \u7528`\n')),(0,s.kt)("p",null,"if you open the  \u5728 CKB \u4e2d\u6211\u4eec\u5e7f\u6cdb\u4f7f\u7528\u7684\u5e8f\u5217\u5316\u683c\u5f0f\u662f ",(0,s.kt)("a",{parentName:"p",href:"https://docs.ckb.dev/docs/rfcs/0008-serialization/0008-serialization#molecule"},"Molecule")," \uff0cMolecule is a canonicalization and zero-copy serialization format and Molecule \u80fd\u591f\u6781\u5927\u5730\u51cf\u5c11\u5185\u5b58\u6d88\u8017\uff0c\u4e4b\u524d\u63d0\u5230\u7684 witness \u5c31\u662f\u7528 molecule \u5e8f\u5217\u5316\u7684\uff1a",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb/pull/1739"},"feat: use molecule to serialize"),"\n\u4f60\u4e5f\u53ef\u4ee5 see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork"},"nervosnetwork"),"/",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/moleculec-es"},"moleculec-es")," , \u76f4\u63a5 download precompiled binary from ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/xxuejie/moleculec-es/releases"},"releases")," page, and put the binary in molecule-es project PATH.  \u6700\u7ec8\u751f\u6210\u7684  ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTransaction.umd.js"),"  \u5c31\u53ef\u4ee5\u7528\u4e8e serialization."),(0,s.kt)("h3",{id:"transform-plain-javascript-object--to-another-javascript-object-which-can-be-serialized-by-moleculec-es"},"Transform plain JavaScript object  to another JavaScript object which can be serialized by moleculec-es"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"UnsignedTransaction.umd.js\n  \n  function SerializeUnsignedTransaction(value) {\n    const buffers = [];\n    buffers.push(SerializeSigningMethods(value.signing_method));\n    buffers.push(SerializeTransaction(value.tx));\n    buffers.push(SerializeTransactionVec(value.input_txs));\n    buffers.push(SerializeTransactionVec(value.cell_dep_txs));\n    buffers.push(SerializeHeaderVec(value.headers));\n    return serializeTable(buffers);\n  }\n")),(0,s.kt)("p",null,"\u4f60\u9700\u8981\u751f\u6210\u53ef\u4ee5\u88ab   ",(0,s.kt)("inlineCode",{parentName:"p"},"SerializeUnsignedTransaction")," fucntion  serialized \u7684 JS object"),(0,s.kt)("p",null,"\u9700\u7528 ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#normalizers"},"normalizers")," class in ckb-js-toolkit, A normalizer function takes plain JavaScript object that can be validated by validator function, it then emits another transformed plain JavaScript object which can be serialized by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/xxuejie/moleculec-es"},"moleculec-es")," into serialized ArrayBuffer data in molecule format\uff0cFor each CKB data structure, we have prepared a normalizer function, see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#function-prototypes-2"},"Function prototypes"),"."),(0,s.kt)("p",null," generate and transform ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTx")," object,  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const { Reader,normalizers } = require("ckb-js-toolkit");\n\nconst SighashAllSigning = {\n    signing_script: normalizers.NormalizeScript(tx.outputs[0].lock)\n   }\n   const signing_method = \n   {type: "SighashAllSigning", \n   value: SighashAllSigning}\n\n   const Unsignedtx = Object();\n\n   Unsignedtx.signing_method = signing_method;\n   \n   Unsignedtx.tx = normalizers.NormalizeTransaction(tx);\n\n \n   const INPUT_TX_HASH = tx.inputs[0].previous_output.tx_hash;\n   const input_txs = (await rpc.get_transaction(INPUT_TX_HASH)).transaction;\n\n \n   const CELL_DEP_TX_HASH = tx.cell_deps[0].out_point.tx_hash;\n   const cell_dep_txs = (await rpc.get_transaction(CELL_DEP_TX_HASH)).transaction\n\n   const txstatus = (await rpc.get_transaction(INPUT_TX_HASH)).tx_status;\n   const headers = (await rpc.get_block(txstatus.block_hash)).header;\n\n   const normalizedinput_txs = normalizers.NormalizeTransaction(input_txs);\n \n   Unsignedtx.input_txs = new Array(normalizedinput_txs);\n \n   const normalizedcell_dep_txs = normalizers.NormalizeTransaction(cell_dep_txs);\n   Unsignedtx.cell_dep_txs = new Array(normalizedcell_dep_txs);\n  \n   const normalizedheaders = normalizers.NormalizeHeader(headers);\n   Unsignedtx.headers = new Array(normalizedheaders);\n\n')),(0,s.kt)("h3",{id:"generate-serialized-arraybuffer-data-in-molecule-format"},"Generate serialized ArrayBuffer data in molecule format"),(0,s.kt)("p",null,"use ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsignedTransaction")," function in UnsignedTransaction.umd.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const UnsignedTransaction = require ("../schema/UnsignedTransaction.umd.js");\nconst serializedUnsignedTx = new Reader(\n    UnsignedTransaction.SerializeUnsignedTransaction(Unsignedtx)\n    ).serializeJson();\n')),(0,s.kt)("h3",{id:"download-the-serializedunsignedtx-json-file"},"download the serializedUnsignedTx json file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"//download the serializedUnsignedTx json file\n    const readable = toStream(Buffer.from(serializedUnsignedTx));\n\n    const writerStream = fs.createWriteStream('UnsignedTx.json');\n    readable.pipe(writerStream);\n\n    \n    reply.document(fs.createReadStream('UnsignedTx.json'));\n")),(0,s.kt)("h2",{id:"use-molecule-deserialization-implementations-for-serialized-unsignedtx"},"Use molecule deserialization implementations for serialized ",(0,s.kt)("inlineCode",{parentName:"h2"},"UnsignedTx")),(0,s.kt)("p",null,"\u901a\u8fc7\u53e6\u4e00\u4e2a\u5de5\u5177  ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/zengbing15/generate-message-tool"},"generate-message-tool")," \u80fd\u591f deserialization \u51fa\u539f\u672c\u7684 transaction\uff0c\u5e76\u80fd\u901a\u8fc7 transaction \u751f\u6210 txSkeleton, \u6700\u7ec8\u901a\u8fc7 txSkeleton.signingEntries \u7684  message \u548c  felix bot reply \u7684 signing message \u8fdb\u884c\u6bd4\u5bf9\uff0c\u5982\u679c\u65e0\u8bef\uff0c\u5219\u8bc1\u660e offline signing \u6ca1\u6709\u95ee\u9898"),(0,s.kt)("h3",{id:"use-molecule-deserialization-implementations-to-deserialize-unsignedtx-data"},"Use molecule deserialization implementations to deserialize UnsignedTx data"),(0,s.kt)("p",null,"a transaction object \u7531\u4ee5\u4e0b object \u7ec4\u6210\uff1asee A transfer transaction on CKB Testnet"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"version"),(0,s.kt)("li",{parentName:"ul"},"cell_deps"),(0,s.kt)("li",{parentName:"ul"},"header_deps"),(0,s.kt)("li",{parentName:"ul"},"inputs"),(0,s.kt)("li",{parentName:"ul"},"outputs"),(0,s.kt)("li",{parentName:"ul"},"outputs_data"),(0,s.kt)("li",{parentName:"ul"},"witnesses")),(0,s.kt)("p",null,"use UnsignedTransaction.umd.js to deserialize UnsignedTx data for generating the transaction object:\nUnsignedTransaction.umd.js \u4e2d\u90fd\u7528",(0,s.kt)("inlineCode",{parentName:"p"},"exports"),"\u66b4\u9732\u4e86\u76f8\u5e94\u7684 object deserialize \u63a5\u53e3"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"  UnsignedTransaction.umd.js\n  \n  exports.Block = Block;\n  exports.Byte32 = Byte32;\n  exports.Byte32Vec = Byte32Vec;\n  exports.Bytes = Bytes;\n  ......\n")),(0,s.kt)("p",null,"\u53ea\u8981\u901a\u8fc7\u63a5\u53e3\u8c03\u7528\u76f8\u5e94\u7684 getXX() \u547d\u4ee4\u5c31\u53ef\u4ee5\u8fdb\u884c deserialize \uff0c\n\u53e6\u5916\uff0c\u56e0\u4e3a Hex string might be provided in CKB RPC responses , \u6240\u4ee5\u9700\u8981\u4f7f\u7528  Reader class to convert them to the correct hex format , see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#reader"},"Reader")," in ckb-js-toolkit ,  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const UnsignedTransaction = require ("../schema/UnsignedTransaction.umd.js");\n\n/* Read UnsignedTx.json file */\n\nlet rawdata = fs.readFileSync(\'UnsignedTx.json\');\nlet unsignedtx = rawdata.toString();\nconst wholetx = new Object();\nconst UnsignedTx = new UnsignedTransaction.UnsignedTransaction(new Reader(unsignedtx));\n\nconst tx = UnsignedTx.getTx();\n\n// version object\nwholetx.version = "0x"+tx.getRaw().getVersion().toBigEndianUint32().toString(16);\n\n// cell_deps object\nconst cellDeps_arraybuffer = new Array();\nfor ( var i=0; i < tx.getRaw().getCellDeps().length(); i++){\n  cellDeps_arraybuffer.push({\n    "out_point":{\n      "tx_hash":tx.getRaw().getCellDeps().indexAt(i).getOutPoint().getTxHash().raw(),\n      "index":tx.getRaw().getCellDeps().indexAt(i).getOutPoint().getIndex()\n    },\n    "dep_type":tx.getRaw().getCellDeps().indexAt(i).getDepType() \n   });\n  }\n\n  // "dep_type" = uint8(1) means that "dep_type" is "dep_group"\nwholetx.cell_deps = new Array();\nfor ( var i=0; i < tx.getRaw().getCellDeps().length(); i++){\n  wholetx.cell_deps.push({\n    "out_point":{\n      "tx_hash":"0x"+ Buffer.from(cellDeps_arraybuffer[i].out_point.tx_hash).toString("hex"),\n      "index":"0x"+cellDeps_arraybuffer[i].out_point.index.toBigEndianUint32().toString(16)\n    },\n    "dep_type":"dep_group"\n   });\n  }\n\nfor ( var i=0; i < tx.getRaw().getHeaderDeps().length(); i++){\n  outputsData_arraybuffer.push(tx.getRaw().getHeaderDeps().indexAt(i).raw());\n   }\n// Because headerDeps_arraybuffer = []\nwholetx.header_deps = [];\n\n\n// inputs object\nconst inputs_arraybuffer = new Array();\nfor ( var i=0; i < tx.getRaw().getInputs().length(); i++){\n  inputs_arraybuffer.push({\n    "since":tx.getRaw().getInputs().indexAt(i).getSince().raw(),\n    "previous_output":{\n      "tx_hash":tx.getRaw().getInputs().indexAt(i).getPreviousOutput().getTxHash().raw(),\n      "index":tx.getRaw().getInputs().indexAt(i).getPreviousOutput().getIndex()\n    },  \n   });\n  }\n\n  wholetx.inputs = new Array();\n\nfor ( var i=0; i < tx.getRaw().getInputs().length(); i++){\n  wholetx.inputs.push({\n    "since":"0x"+Buffer.from(inputs_arraybuffer[i].since).toString("hex"),\n    "previous_output":{\n      "tx_hash":"0x"+Buffer.from(inputs_arraybuffer[i].previous_output.tx_hash).toString(\'hex\'),\n      "index":"0x"+inputs_arraybuffer[i].previous_output.index.toLittleEndianUint32().toString(16)\n    },\n    \n   });\n  }\n  \n//outputs object\n  const outputs_arraybuffer = new Array();\nfor ( var i=0; i < tx.getRaw().getOutputs().length(); i++){\n  outputs_arraybuffer.push({\n    "capacity":tx.getRaw().getOutputs().indexAt(i).getCapacity().toLittleEndianBigUint64(),\n    "lock": {\n      "code_hash":tx.getRaw().getOutputs().indexAt(i).getLock().getCodeHash().raw(),\n      "hash_type":tx.getRaw().getOutputs().indexAt(i).getLock().getHashType(),\n      "args":tx.getRaw().getOutputs().indexAt(i).getLock().getArgs().raw()\n    }, \n    \n   });\n  }\n\n  wholetx.outputs = new Array();\nfor ( var i=0; i < tx.getRaw().getOutputs().length(); i++){\n  wholetx.outputs.push({\n    "capacity":"0x"+ outputs_arraybuffer[i].capacity.toString(16),\n    "lock": {\n      "code_hash":"0x"+Buffer.from(outputs_arraybuffer[i].lock.code_hash).toString("hex"),\n      "hash_type":"type",\n      "args":"0x"+Buffer.from(outputs_arraybuffer[i].lock.args).toString("hex")\n    },\n   });\n  }\n\n//outputs_data object\n  const outputsData_arraybuffer = new Array();\nfor ( var i=0; i < tx.getRaw().getOutputsData().length(); i++){\n  outputsData_arraybuffer.push(tx.getRaw().getOutputsData().indexAt(i).raw());\n   }\n\nwholetx.outputs_data = new Array()\nfor ( var i=0; i < tx.getRaw().getOutputsData().length(); i++){\n  wholetx.outputs_data.push("0x"+Buffer.from(outputsData_arraybuffer[i]).toString("hex"));\n   }\n\n//witnesses object\nconst witness_arraybuffer =  new Array();\nfor ( var i=0; i < tx.getWitnesses().length(); i++){\n  witness_arraybuffer.push(tx.getWitnesses().indexAt(i).raw());\n   }\n\nwholetx.witnesses = new Array()\nfor (var i=0; i < tx.getWitnesses().length(); i++){\nwholetx.witnesses.push("0x"+Buffer.from(witness_arraybuffer[i]).toString("hex"));\n}\n\nconsole.log(JSON.stringify(wholetx,null,2));\n')),(0,s.kt)("h3",{id:"generate--the-signing-message"},"Generate  the signing message"),(0,s.kt)("p",null,"\u53ef\u4ee5\u901a\u8fc7 ",(0,s.kt)("inlineCode",{parentName:"p"},"common.prepareSigningEntries(txSkeleton)")," \u751f\u6210 signing message ,\u6240\u4ee5\u8981\u5148\u751f\u6210  txSkeleton."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u901a\u8fc7 transaction object \u62fc\u51fa txSkeleton object"),(0,s.kt)("li",{parentName:"ul"},"Use ",(0,s.kt)("a",{parentName:"li",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#objecttotransactionskeleton"},"objectToTransactionSkeleton")," convert txSkeleton object to TransactionSkeleton type"),(0,s.kt)("li",{parentName:"ul"},"Use ",(0,s.kt)("inlineCode",{parentName:"li"},"common.prepareSigningEntries(txSkeleton)"),"to generate message")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const {objectToTransactionSkeleton} = require("@ckb-lumos/helpers");\nasync function main() {\n    \n    const rpc = new RPC("http://localhost:8114");\n    const INPUT_TX_HASH = wholetx.inputs[0].previous_output.tx_hash;\n\n    const transaction = (await rpc.get_transaction(INPUT_TX_HASH)).transaction;\n\n    const txstatus = (await rpc.get_transaction(INPUT_TX_HASH)).tx_status;\n    const blockheader = (await rpc.get_block(txstatus.block_hash)).header;\n\n    // witness = {lock is 0, input_type is null, output_type is null}\n  const obj = new Object();\n  obj.cellProvider = { indexer };\n  obj.cellDeps = transaction.cell_deps;\n  obj.headerDeps = transaction.header_deps;\n  obj.inputs = List([\n    { "cell_output": transaction.outputs[1], \n      "out_point": wholetx.inputs[0].previous_output,\n      "block_hash": txstatus.block_hash ,\n      "block_number": blockheader.number, \n      "data": transaction.outputs_data[1]}]);\n   obj.outputs = new Array();\n   for ( var i=0; i < wholetx.outputs.length; i++){\n    obj.outputs.push({ "cell_output": wholetx.outputs[i],"data":wholetx.outputs_data[i]});\n     }\n  obj.witnesses = List(["0x55000000100000005500000055000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]);\n  obj.fixedEntries = [];\n  obj.signingEntries = [];\n  obj.inputSinces = {};\n\n  let txSkeleton = objectToTransactionSkeleton(obj);\n  console.log(JSON.stringify(txSkeleton.toJS(),null,2));\n\n  txSkeleton = common.prepareSigningEntries(txSkeleton);\n  //console.log(JSON.stringify(txSkeleton.toJS(),null,2));\n\n  const signingEntriesArray = txSkeleton.signingEntries.toArray();\n\n  console.log("The generated message is "+ signingEntriesArray[0].message);\n}\n\nmain();\n')),(0,s.kt)("p",null,"\u751f\u6210\u4e86 transaction json code and message  to be confirmed. "),(0,s.kt)("h2",{id:"\u601d\u8003"},"\u601d\u8003\uff1a"),(0,s.kt)("p",null,"\u4e0d\u77e5\u9053\u4f60\u53d1\u73b0\u6ca1\u6709\uff1fFelix bot DApp \u51e0\u4e4e\u6240\u6709\u7684\u6570\u636e\u90fd\u5728\u94fe\u4e0b\u5904\u7406\uff0c\u63d0\u4ea4\u5230\u94fe\u4e0a\u7684\u53ea\u662f\u6700\u7ec8\u7684 tx_hash \u800c\u8fd9\u6b63\u662f CKB Layer1 DApp \u5f00\u53d1\u4e2d\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u539f\u5219\uff1a\n\u9664\u975e\u5fc5\u8981\uff0c\u4ec5\u63d0\u4ea4\u6700\u5c0f\u5316\u7684\u6570\u636e\u5230 CKB \u94fe\u4e0a\uff0c\u4e00\u4e2a Cell \u672c\u8eab\u5c31\u9700\u8981 61 CKB\uff0c\u786e\u5b9e\u662f\u5bf8\u571f\u5bf8\u91d1\uff0c"),(0,s.kt)("p",null,"\u5c31\u50cf CKB\uff08common knowledge base\uff09\u7684\u540d\u5b57\u7684\u610f\u601d\u90a3\u6837\uff0c\u53ea\u6709\u771f\u6b63\u7684\u91cd\u8981\u7684 common knowledge\u624d\u9700\u8981\u5171\u8bc6\uff0c\u63d0\u4ea4\u5230\u94fe\u4e0a\uff0c\u5269\u4e0b\u5728\u94fe\u4e0b\u80fd\u63a8\u5bfc\u7684\u6570\u636e\u662f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u63d0\u4ea4\u5230\u94fe\u4e0a\uff0c\u8fd9\u6837\u80fd\u901a\u8fc7\u94fe\u4e0a\u7684\u5c11\u91cf\u6570\u636e\u6765\u786e\u4fdd\u94fe\u4e0b\u6570\u636e\u7684\u786e\u5b9a\u6027\u3002\u56e0\u6b64\u53ef\u4ee5\u65e2\u4eab\u7528\u533a\u5757\u94fe\u7684\u597d\u5904\uff0c\u53c8\u53ef\u4ee5\u907f\u514d\u533a\u5757\u94fe\u6027\u80fd\u65b9\u9762\u7684\u574f\u5904\uff0c\u8fd9\u4e5f\u662f CKB \u7684 \u91cd\u8981 design \u601d\u8def\u3002"))}d.isMDXComponent=!0}}]);