"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[629],{9012:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={id:"transfer-tx-dapp-demo",title:"Transfer-Tx DApp demo",sidebar_position:4},l=void 0,p={unversionedId:"transfer-tx-dapp-demo",id:"transfer-tx-dapp-demo",isDocsHomePage:!1,title:"Transfer-Tx DApp demo",description:"You've understood the important data strucure: Cell, Script and Transaction, now you can start to develop some simple DApp demos now.",source:"@site/docs/transfer-tx-dapp.md",sourceDirName:".",slug:"/transfer-tx-dapp-demo",permalink:"/implement-dapp-docs/transfer-tx-dapp-demo",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/transfer-tx-dapp.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"transfer-tx-dapp-demo",title:"Transfer-Tx DApp demo",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"RPC and Transaction",permalink:"/implement-dapp-docs/rpc-and-transaction"},next:{title:"Felix Bot DApp demo",permalink:"/implement-dapp-docs/felix-bot"}},c=[{value:"Project Structure",id:"project-structure",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Set up the Configuration for Lumos",id:"set-up-the-configuration-for-lumos",children:[{value:"Step1: Set up the Config Manager",id:"step1-set-up-the-config-manager",children:[]},{value:"Step2: Set Up the Lumos Indexer",id:"step2-set-up-the-lumos-indexer",children:[]}]},{value:"Build the Transfer Transaction",id:"build-the-transfer-transaction",children:[{value:"Step1: Create a transaction skeleton",id:"step1-create-a-transaction-skeleton",children:[]},{value:"Step2: Add the transaction fee",id:"step2-add-the-transaction-fee",children:[]},{value:"Step3: Prepare the signing entries",id:"step3-prepare-the-signing-entries",children:[]},{value:"Step4: Sign the transaction",id:"step4-sign-the-transaction",children:[]},{value:"Step5: Seal the transaction",id:"step5-seal-the-transaction",children:[]},{value:"Step6: Send the finalized transaction to the CKB network",id:"step6-send-the-finalized-transaction-to-the-ckb-network",children:[]},{value:"Workflow",id:"workflow",children:[]}]},{value:"TroubleShooting",id:"troubleshooting",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"You've understood the important data strucure: Cell, Script and Transaction, now you can start to develop some simple DApp demos now."),(0,r.kt)("p",null,"Maybe you have a question, could such a complex transaction code only be built manually?",(0,r.kt)("br",{parentName:"p"}),"\n","Of course not.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos"},"Lumos")," is an open-source framework that was developed by the developers team from ",(0,r.kt)("a",{parentName:"p",href:"https://www.cryptape.com/join"},"Cryptape")," for building DApps on CKB.You can use lumos to build transactions on your own."),(0,r.kt)("p",null," The transfer-tx DApp demo is based on Lumos functionalities to implement the most basic functions. You've already experienced the RPC component of lumos on ",(0,r.kt)("a",{parentName:"p",href:"rpc-and-transaction#RPC"},"RPC"),". In the process of the transfer-tx DApp development, you can understand more functions and utilities about lumos."),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The full code of the example can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zengbing15/simple-dapp-demo/tree/main/transfer-tx-dapp-demo"},"here"),", you will see the following files:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"transfer-tx-dapp-demo\n\u251c\u2500\u2500 accounts.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 package.json\n")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"See ",(0,r.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),"."),(0,r.kt)("li",{parentName:"ul"},"Prepare two CKB accounts, Alice and Bob, see ",(0,r.kt)("a",{parentName:"li",href:"rpc-and-transaction#create-ckb-accounts"},"Create CKB accounts"),". The payer is Alice and the recipient is Bob."),(0,r.kt)("li",{parentName:"ul"},"Specify Alice as the miner to receive mining rewards, see ",(0,r.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-5-get-ckb-capacity-for-the-account-of-alice"},"Step 5. Get CKB capacity for the account of Alice"),"."),(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"accounts.js")," file.")),(0,r.kt)("h2",{id:"set-up-the-configuration-for-lumos"},"Set up the Configuration for Lumos"),(0,r.kt)("h3",{id:"step1-set-up-the-config-manager"},"Step1: Set up the Config Manager"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Generate the config.json file for the DEV chain"),"    "),(0,r.kt)("p",null,"see ",(0,r.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/guides/config#set-up-the-config-manager-by-using-a-local-config-file"},"Set Up the Config Manager by Using a Local Config File"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Set up the config manager")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/config-manager"),".  The config manager component (",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/config-manager"),") deals with differences between chains, such as the Mainnet, Testnet, or numerous DEV chains. Each chain is abstracted into an individual configuration file.\nWhen a configuration file is loaded, the config manager processes the chain specific logic, sparing the corresponding coding work for configuration management."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @ckb-lumos/config-manager\n")),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { initializeConfig, getConfig } = require(\"@ckb-lumos/config-manager\");\nprocess.env.LUMOS_CONFIG_FILE = process.env.LUMOS_CONFIG_FILE || './config.json'\ninitializeConfig();\nconst CKB_CONFIG = getConfig();\n")),(0,r.kt)("h3",{id:"step2-set-up-the-lumos-indexer"},"Step2: Set Up the Lumos Indexer"),(0,r.kt)("p",null," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/indexer"),", see ",(0,r.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/guides/indexer"},"Set Up the Lumos Indexer"),". The Lumos indexer is a CKB cell indexer. The Lumos indexer indexes cells and maintains a local database of the cells that provides an optimal way for querying cells."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @ckb-lumos/indexer\n")),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const {Indexer} = require("@ckb-lumos/indexer");\nconst CKB_RPC_URI = process.env.CKB_RPC_URI || "http://127.0.0.1:8114";\nconst CKB_INDEXER_DATA = process.env.CKB_INDEXER_DATA || "./indexer-data";\nconst indexer = new Indexer(CKB_RPC_URI, CKB_INDEXER_DATA);\nindexer.startForever();\n')),(0,r.kt)("h2",{id:"build-the-transfer-transaction"},"Build the Transfer Transaction"),(0,r.kt)("p",null,"A transaction, at its core, really just consumes some cells, and create another set of cells. As a result, the ability to locate and transform cells, plays a critical role in building any CKB dapps, which leads to the ",(0,r.kt)("inlineCode",{parentName:"p"},"index-query-assemble")," pattern, see ",(0,r.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"},"Index-Query-Assemble Pattern"),". Lumos was designed on the basis of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Index-Query-Assemble")," pattern. The lumos indexer is already set in ",(0,r.kt)("a",{parentName:"p",href:"#step2-set-up-the-lumos-indexer"},"Step2: Set Up the Lumos Indexer")," , now you can query and assemble cells to build transfer transaction."),(0,r.kt)("h3",{id:"step1-create-a-transaction-skeleton"},"Step1: Create a transaction skeleton"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#transfer-10"},"transfer")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts")," and ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#transactionskeleton"},"TransactionSkeleton")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")),(0,r.kt)("p",null,"The common scripts component (",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts"),") integrates known scripts on CKB. The scripts use a cell provider (the Lumos indexer) to collect cells and assemble transactions. Each script implements a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"TransactionSkeleton")," for building transactions that forms a unified workflow for transaction generation."),(0,r.kt)("p",null,"The helpers component (",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers"),") defines interfaces, types and utilities that require to work under a CKB network. The network, testnet or mainnet, is specified by the config manager."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @ckb-lumos/common-scripts\n$ yarn add @ckb-lumos/helpers\n")),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{4,5,7}","{4,5,7}":!0},"const {common} = require('@ckb-lumos/common-scripts');\nconst {TransactionSkeleton} = require(\"@ckb-lumos/helpers\");\n\nconst SHANNONS = BigInt(100000000);\nconst AMOUNT = BigInt(process.env.AMOUNT || 500)*SHANNONS;\n\nconst fromInfos = [\n        ALICE.ADDRESS,\n        {\n        R: 0,\n        M: 1,\n        publicKeyHashes: [ALICE.ARGS],\n    },\n    ]\n\n    let txSkeleton = TransactionSkeleton({ cellProvider: indexer });\n\n    const tipheader = await CKB_RPC.get_tip_header();\n    \n    txSkeleton = await common.transfer(\n        txSkeleton,\n        fromInfos,\n        BOB.ADDRESS,\n        BigInt(AMOUNT),\n        undefined,\n        tipheader\n    );\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"About ",(0,r.kt)("inlineCode",{parentName:"p"},"AMONT"),":  A cell's size is the total size of all fields contained in it,see ",(0,r.kt)("a",{parentName:"p",href:"rpc-and-transaction#cell"},"Cell"),".A cell is required at least 61 CKBytes, otherwise, the ",(0,r.kt)("inlineCode",{parentName:"p"},"InsufficientCellCapacity")," error will be sent."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'InsufficientCellCapacity error: \n(node:82255) UnhandledPromiseRejectionWarning: Error: JSONRPCError: server error {"code":-302"message":"TransactionFailedToVerify: Verification failed Transaction(InsufficientCellCapacity\n(Outputs[0]): expected occupied capacity (0x16b969d00) <= capacity (0x165a0bc00))",\n"data":"Verification(Error { kind: Transaction, inner: InsufficientCellCapacity(Outputs[0]): \nexpected occupied capacity (0x16b969d00) <= capacity (0x165a0bc00) })"}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"About ",(0,r.kt)("inlineCode",{parentName:"p"},"SHANNONS"),":  The smallest unit of CKB capacity called ",(0,r.kt)("strong",{parentName:"p"},"shannon"),". 1 CKByte = 100000000 shannon ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"About ",(0,r.kt)("inlineCode",{parentName:"p"},"fromInfos"),":  Lumos supports gathering input cells from singe or multiple accounts by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromInfos")," parameter,see ",(0,r.kt)("inlineCode",{parentName:"p"},"Constructor")," section in ",(0,r.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/guides/buildtransactions#transfer-ckb-in-a-common-transaction"},"Transfer CKB in a Common Transaction")," The transfer transaction is used single sign case, so ",(0,r.kt)("inlineCode",{parentName:"p"},"R:0 M:1"),"."))),(0,r.kt)("h3",{id:"step2-add-the-transaction-fee"},"Step2: Add the transaction fee"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#payfeebyfeerate-2"},"payFeeByFeeRate")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts")," to set up the dynamic transaction fee."),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"}," const FEE_RATE = BigInt(process.env.FEE_RATE || 1000);\n txSkeleton = await common.payFeeByFeeRate(\n        txSkeleton,\n        fromInfos,\n        FEE_RATE,\n        tipheader\n    );\n")),(0,r.kt)("h3",{id:"step3-prepare-the-signing-entries"},"Step3: Prepare the signing entries"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#preparesigningentries-12"},"prepareSigningEntries")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts")," to add the signing entries to the transaction skeleton. The result is a raw transaction that requires signatures."),(0,r.kt)("p",null,"Example usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"txSkeleton = common.prepareSigningEntries(txSkeleton);\n")),(0,r.kt)("h3",{id:"step4-sign-the-transaction"},"Step4: Sign the transaction"),(0,r.kt)("p",null," Use the ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#signrecoverable-3"},"key.signRecoverable")," function of the HD wallet manager (",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/hd"),") package to generate a signature based on the private key and signing message.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add ckb-js-toolkit\n$ yarn add ckb-lumos/hd\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"{11}","{11}":!0},'const {Reader} = require("ckb-js-toolkit");\nconst { key } = require("@ckb-lumos/hd");\n    \nconst message = txSkeleton\n.get("signingEntries")\n.map((e) => {\nconst lock = txSkeleton.get("inputs").get(e.index).cell_output.lock;\nreturn `${e.message}`\n}).toArray().toString(); \n    \nconst hexmessage = new Reader(message).serializeJson();\nconst signature = key.signRecoverable(hexmessage, ALICE.PRIVATE_KEY);\n')),(0,r.kt)("p",null,"About ",(0,r.kt)("inlineCode",{parentName:"p"},"Reader")," class\uff1aUse ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#reader"},"Reader class")," in CKB-JS-Toolkit to transfer ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"'s format to ",(0,r.kt)("inlineCode",{parentName:"p"},"Hex string"),".Because in the process of development on DApps you should convert values in specific formats."),(0,r.kt)("h3",{id:"step5-seal-the-transaction"},"Step5: Seal the transaction"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#sealtransaction"},"sealTransaction")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")," to seal the transaction with ",(0,r.kt)("inlineCode",{parentName:"p"},"txSkeleton")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"signature"),".The transaction is built."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const {sealTransaction} = require("@ckb-lumos/helpers");\n    \nconst tx = sealTransaction(txSkeleton, [signature]);\nconsole.log(JSON.stringify(tx,null,2))\n\n')),(0,r.kt)("h3",{id:"step6-send-the-finalized-transaction-to-the-ckb-network"},"Step6: Send the finalized transaction to the CKB network"),(0,r.kt)("p",null,"Remember you have experienced ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/rpc")," in ",(0,r.kt)("a",{parentName:"p",href:"rpc-and-transaction#connect-to-ckb-node-through-rpc"},"Connect to CKB node through RPC"),"?",(0,r.kt)("br",{parentName:"p"}),"\n","Now you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/rpc")," to send the transaction to the CKB network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @ckb-lumos/rpc\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const { RPC } = require("@ckb-lumos/rpc");\n\nconst CKB_RPC_URI = process.env.CKB_RPC_URI || "http://localhost:8114";\nconst rpc = new RPC(CKB_RPC_URI);\nconst hash = await rpc.send_transaction(tx);\nconsole.log(\'The transaction hash is:\', hash);\n')),(0,r.kt)("p",null,"A transaction hash output example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"The transaction hash is: 0xbbab8ff0e8609fca7a7bbfb8112a13027058d38b740d67db191f95ee34f3a8c1\n")),(0,r.kt)("h3",{id:"workflow"},"Workflow"),(0,r.kt)("p",null,"The DApp can assemble a transaction in the following steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set up the Configuration for Lumos",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Step1: Set up the Config Manager"),(0,r.kt)("li",{parentName:"ul"},"Step2: Set up the Lumos Indexer"))),(0,r.kt)("li",{parentName:"ul"},"Build the Transfer Transaction",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Step1: Create a transaction skeleton"),(0,r.kt)("li",{parentName:"ul"},"Step2: Add the transaction fee"),(0,r.kt)("li",{parentName:"ul"},"Step3: Prepare the signing entries "),(0,r.kt)("li",{parentName:"ul"},"Step4: Sign the transaction"),(0,r.kt)("li",{parentName:"ul"},"Step5: Seal the transaction"),(0,r.kt)("li",{parentName:"ul"},"Step6: Send the finalized transaction to the CKB network")))),(0,r.kt)("p",null,"You have developed your first DApp demo.In the process, you have learned about almost all lumos components.",(0,r.kt)("br",{parentName:"p"}),"\n","Well done!",(0,r.kt)("br",{parentName:"p"}),"\n","For more information about lumos, see ",(0,r.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/"},"lumos-doc"),"."),(0,r.kt)("h2",{id:"troubleshooting"},"TroubleShooting"),(0,r.kt)("p",null,"When you generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"config.json")," file, may encounter binary execution error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"dyld: malformed mach-o image: segment __DWARF has vmsize < filesize\n[1] 35570 abort ./lumos-config-generator config.json\n")),(0,r.kt)("p",null,"The reason is that if macOS is upgraded to Catalina, there is a problem with golang execution.",(0,r.kt)("br",{parentName:"p"}),"\n","Use ",(0,r.kt)("inlineCode",{parentName:"p"},'go build -ldflags "-w"')," to compile source code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ git clone https://github.com/classicalliu/lumos-config-generator.git\n$ cd lumos-config-generator\n$ go build -ldflags "-w" \n')),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("h2",{parentName:"div",id:"generation-offline-validation-online"},"Generation offline Validation online"),(0,r.kt)("p",{parentName:"div"},"DApps on CKB layer1 separate the generation and verification of state. The state can be generated offline and verified online, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0002-ckb/0002-ckb.md#41-state-generation-and-verification"},"State Generation and Verification"),".     "),(0,r.kt)("p",{parentName:"div"},"After the transaction has been built offline, the state is already determined by ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs"),". The transaction is committed online just for validating the legitimacy. That is why lumos can be used to build transactions offline."),(0,r.kt)("p",{parentName:"div"},"If you know about DApps developments on Ethereum, have you found the difference between CKB and Ethereum?"),(0,r.kt)("p",{parentName:"div"},"On Ethereum, the transaction includes ",(0,r.kt)("inlineCode",{parentName:"p"},"calldata")," and smart contracts.After the transaction is committed, the EVM online executes the transaction then the smart contracts are deployed and executed, then the account's data is modified and a new world state is obtained. Which means that The state should be determined after the transaction is committed.This is the essential difference between Nervos CKB and Ethereum."),(0,r.kt)("p",{parentName:"div"},"But does this means Ethereum DApp developers who want to develop on CKB have to abandon their previous development habits and learn a new set of programming models and tools?",(0,r.kt)("br",{parentName:"p"}),"\n","Of course not!",(0,r.kt)("br",{parentName:"p"}),"\n","The reason will be revealed in ",(0,r.kt)("a",{parentName:"p",href:"conclusion#stay-tuned"},"Stay tuned"),"."))))}u.isMDXComponent=!0}}]);