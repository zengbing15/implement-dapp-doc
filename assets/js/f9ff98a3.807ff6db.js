"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[464],{824:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return r},metadata:function(){return p},toc:function(){return l},default:function(){return h}});var a=n(7462),s=n(3366),i=(n(7294),n(3905)),c=["components"],o={id:"rpc-and-transaction",title:"RPC and Transaction",sidebar_position:3},r=void 0,p={unversionedId:"rpc-and-transaction",id:"rpc-and-transaction",isDocsHomePage:!1,title:"RPC and Transaction",description:"RPC",source:"@site/docs/rpc-and-transaction.md",sourceDirName:".",slug:"/rpc-and-transaction",permalink:"/implement-dapp-docs/rpc-and-transaction",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/rpc-and-transaction.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"rpc-and-transaction",title:"RPC and Transaction",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Before We Get Started",permalink:"/implement-dapp-docs/before-we-get-started"},next:{title:"A transfer-tx DApp demo",permalink:"/implement-dapp-docs/transfer-tx-dapp-demo"}},l=[{value:"RPC",id:"rpc",children:[{value:"Set Up the Development Environment",id:"set-up-the-development-environment",children:[]},{value:"Connect to CKB node through RPC",id:"connect-to-ckb-node-through-rpc",children:[]}]},{value:"A transfer transaction on CKB Testnet",id:"a-transfer-transaction-on-ckb-testnet",children:[{value:"Inputs and Outputs",id:"inputs-and-outputs",children:[]},{value:"Cell",id:"cell",children:[]},{value:"cell_deps and Witnesses",id:"cell_deps-and-witnesses",children:[]},{value:"Lock Script",id:"lock-script",children:[]},{value:"Address and Lock Script",id:"address-and-lock-script",children:[]},{value:"Create CKB accounts",id:"create-ckb-accounts",children:[]},{value:"Witnesses",id:"witnesses",children:[]},{value:"Summary",id:"summary",children:[]},{value:"(optional)How to sign the transfer transaction",id:"optionalhow-to-sign-the-transfer-transaction",children:[]}]}],d={toc:l};function h(e){var t=e.components,o=(0,s.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"rpc"},"RPC"),(0,i.kt)("p",null,"First run a CKB node,then use @ckb-lumos/rpc (the RPC component in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos"},"Lumos"),") to interact with CKB network\uff0ccommunicating block and transaction information with CKB nodes."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Lumos is a very handy development tool. CKB DApps can be developed upon lumos. ",(0,i.kt)("a",{parentName:"p",href:"transfer-tx-dapp-demo"},"A transfer-tx DApp demo")," will introduce how to develop DApps upon lumos step by step. "))),(0,i.kt)("h3",{id:"set-up-the-development-environment"},"Set Up the Development Environment"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),",then you will run a CKB node on Dev Chain by using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/tippy"},"Tippy"),"."),(0,i.kt)("p",null,"An example of Tippy's dashboard "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example dashboard",src:n(2194).Z})),(0,i.kt)("h3",{id:"connect-to-ckb-node-through-rpc"},"Connect to CKB node through RPC"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn add @ckb-lumos/rpc\n")),(0,i.kt)("p",null,"Get the blockchain info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { RPC } = require("@ckb-lumos/rpc");\nconst rpc = new RPC("http://localhost:8114");\nasync function main(){\n    const result = await rpc.get_blockchain_info();\n    console.log(result);\n}\nmain();\n')),(0,i.kt)("p",null,"An example of the blockchain info:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  alerts: [],\n  chain: "ckb_dev",\n  difficulty: "0x100",\n  epoch: "0x64005b0000bc",\n  is_initial_block_download: false,\n  median_time: "0x17b9c952a1d"\n')),(0,i.kt)("p",null,"The full code of the example can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/zengbing15/simple-dapp-demo/tree/main/call-rpc"},"here"),"."),(0,i.kt)("p",null,"Great! Now you have got your foot in the door! "),(0,i.kt)("h2",{id:"a-transfer-transaction-on-ckb-testnet"},"A transfer transaction on CKB Testnet"),(0,i.kt)("p",null,"At its core, a blockchain is a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/State_machine_replication"},"replicated deterministic state machine"),".A state machine is a computer science concept whereby a machine can have multiple states, but only one at any given time. There is a state, which describes the current state of the system, and ",(0,i.kt)("inlineCode",{parentName:"p"},"transactions"),", that trigger state transitions.Given a state S and a transaction T, the state machine will return a new state S'."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| State  |  \n|        |             \n+--------+                 \n    |\n    | transactions\n    |\n+--------+                 \n|        |                 \n| State' |  \n|        |             \n+--------+ \n\n")),(0,i.kt)("p",null,"Nervos CKB Layer1 also follows this logic, the following is a transfer transaction on CKB Aggron Testnet, the following is the state transition triggered by the transfer transaction:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The payer's address\uff1ackt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy"),(0,i.kt)("li",{parentName:"ul"},"The recipient's address\uff1ackt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6")),(0,i.kt)("p",null,"An example of transfer transaction on CKB Aggron Testnet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "0x0",\n  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n  "header_deps": [],\n  "inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,i.kt)("p",null,"The transaction JSON code looks a bit complicated, don't panic, let's look through ",(0,i.kt)("inlineCode",{parentName:"p"},"Inputs and Outputs")," first. "),(0,i.kt)("h3",{id:"inputs-and-outputs"},"Inputs and Outputs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{10-27}","{10-27}":!0},'"inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n')),(0,i.kt)("p",null,"You may find that there are two objects in the ",(0,i.kt)("inlineCode",{parentName:"p"},"outputs")," that are similar in structure (put aside the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," now)."),(0,i.kt)("p",null,"You got it!  This is called ",(0,i.kt)("inlineCode",{parentName:"p"},"Cell")," which is the best design about Nervos CKB!"),(0,i.kt)("h3",{id:"cell"},"Cell"),(0,i.kt)("p",null,"Cells are the primary state units in CKB, so the state transition can be represented as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| Cells  |  \n|        |             \n+--------+                 \n    |\n    | transfer transaction\n    |\n+--------+                 \n|        |                 \n| Cells' |  \n|        |             \n+--------+  \n\n")),(0,i.kt)("p",null," A cell has the following fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"Cell: {\n //field name: type\n   capacity: Uint64\n   lock: Script\n   type: Script\n   data: Bytes\n   } \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"capacity\uff1a"),"Size limit of the cell, also the number of native tokens owned by the cell."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"lock\uff1a"),"If you think of Cell as a box\uff0cit's a lock of the box. Every cell has a lock script."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"type:")," Another type of lock with different uses\uff0cit's optional."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"data:")," State data stored in this cell, could be any format.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"outputs_data"),": The actual data are kept separated for the ease of CKB script handling and for the possibility of future optimizations.")))),(0,i.kt)("p",null,"You will find a field called ",(0,i.kt)("inlineCode",{parentName:"p"},'"previous_output"')," in ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{5-6}","{5-6}":!0},'"inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n')),(0,i.kt)("p",null,"The field's name have been fully expressed: ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),"is the ",(0,i.kt)("inlineCode",{parentName:"p"},"previous_output"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," can be indexed through ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),".If you open ",(0,i.kt)("a",{parentName:"p",href:"https://explorer.nervos.org/aggron/transaction/0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1"},"CKB-Explorer")," (switch to ",(0,i.kt)("inlineCode",{parentName:"p"},"AGGRON"),") \uff0cSearch for ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_hash"),", you will find the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs"),"with the similar address of the payer's address."),(0,i.kt)("p",null,"An Example usage of CKB-Explorer"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"An Example usage of CKB-Explorer",src:n(5258).Z})),(0,i.kt)("p",null,"In conclusion, the essence of the transaction is to spend some cells, and then generate some new cells, which will also become input cells that need to be spent in another transaction. The unspent cells are called live cells. This concepts are similar to that of ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unspent_transaction_output"},"UTXO")," in Bitcoin's terminology. "),(0,i.kt)("p",null,"the state transition can be represented as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| Cell A |  \n|        |             \n+--------+                 \n    |\n    | transfer transaction\n    |\n+--------+                 \n|        |                 \n| Cell B |\n| Cell C |\n|        |             \n+--------+  \n\n")),(0,i.kt)("h3",{id:"cell_deps-and-witnesses"},"cell_deps and Witnesses"),(0,i.kt)("p",null,"Come to ",(0,i.kt)("inlineCode",{parentName:"p"},"cell_deps")," first, have you found out? ",(0,i.kt)("inlineCode",{parentName:"p"},"out_point")," also made up of ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),", so    ",(0,i.kt)("inlineCode",{parentName:"p"},"cell_deps")," is actually pointed to a cell with ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index"),", so what is this cell for?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4-5}","{4-5}":!0},'  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/blob/master/c/secp256k1_blake160_sighash_all.c"},"SECP256K1_BLAKE160")," is a piece of code using the same secp256k1 signature verification algorithm as used in bitcoin.It is the default lock script used to protect the ownership of each cell. "),(0,i.kt)("p",null,"There is one cell created in the genesis block and SECP256K1_BLAKE160 code is compiled and put in the ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," field of the cell. The transfer transaction should use it as ",(0,i.kt)("inlineCode",{parentName:"p"},"cell_deps")," to protect cells in ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs and outputs"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," are the same with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-system-script-list/0024-ckb-system-script-list.md#locks"},"SECP256K1_BLAKE160 info"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Secp256k1-info",src:n(8145).Z})),(0,i.kt)("p",null,"The info of secp256k1 cell in Aggron Testnet."),(0,i.kt)("h3",{id:"lock-script"},"Lock Script"),(0,i.kt)("p",null,"So what is the specific mode of operation?"),(0,i.kt)("p",null,"The type of the lock script is ",(0,i.kt)("inlineCode",{parentName:"p"},"Script"),"\uff0c A cell has the following fields:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"Script: {\n// field name: type\n   code_hash: H256(hash)\n   args: Bytes\n   hash_type: String, could be `type` or `data`\n   } \n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"hash_type")," means that the interpretation of code hash when looking for matched dep cells. The default lock script should be ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Lock Script: {\n   code_hash: H256(hash)\n   args: Bytes\n   hash_type: `type`\n   } \n")),(0,i.kt)("p",null,"Fill in ",(0,i.kt)("inlineCode",{parentName:"p"},"code_hash")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"dep_cell"),"'s code hash, also fill in ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," with the payer's public key hash. When the payer commits a transaction, TA should sign the transaction with private key, which is what ",(0,i.kt)("inlineCode",{parentName:"p"},"Witnesses")," puts it on."),(0,i.kt)("p",null,"In this way,the SECP256K1 encryption algorithm with the public key and signature can figure out whether the transaction was committed by the corresponding private key, and also figure out whether the real owner is operating behind it."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"code_hash")," in the lock script are the same with ",(0,i.kt)("inlineCode",{parentName:"p"},"code_hash")," in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-system-script-list/0024-ckb-system-script-list.md#locks"},"SECP256K1_BLAKE160 info"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Secp256k1-info",src:n(8145).Z})),(0,i.kt)("p",null,"The info of secp256k1 cell in Aggron Testnet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{15,23}","{15,23}":!0},'  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n  ......\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,i.kt)("h3",{id:"address-and-lock-script"},"Address and Lock Script"),(0,i.kt)("p",null,"The last thing you need to understand is ",(0,i.kt)("inlineCode",{parentName:"p"},"Address")," on CKB network."),(0,i.kt)("p",null,'On CKB network,an accont is a set of live cells with similar lock script. An address is packaged the lock script into a single line with verificable and human readable format.\nThe prefix of "ckt" is means that the address is created on CKB testnet, see ',(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0021-ckb-address-format/0021-ckb-address-format.md#ckb-address-format"},"RFC: CKB Address Format")),(0,i.kt)("p",null,"Therefore, an address is represented as an account.\nThe relationship between private key, public key\uff08args\uff09, lock script, and CKB address is represented as follows\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markdown"},"+-------------+                 \n| private key | -----$\\rightarrow$                 \n+-------------+\n")),(0,i.kt)("p",null,"[Image: image.png]"),(0,i.kt)("h3",{id:"create-ckb-accounts"},"Create CKB accounts"),(0,i.kt)("p",null,"You can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-cli"},"CKB-CLI")," to generate accounts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Prerequisites\uff1a",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Run a CKB Node on DEV Chain by Using Tippy")),(0,i.kt)("li",{parentName:"ul"},"Step 1. ",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-1-download-the-ckb-pre-built-installer-package"},"Download the CKB pre-built installer package"),"."),(0,i.kt)("li",{parentName:"ul"},"Step 2. ",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-2-verify-the-ckb-cli-tool-is-working-and-check-the-version"},"Verify the ckb-cli tool is working and check the version"),"."),(0,i.kt)("li",{parentName:"ul"},"Step 3. ",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-3-create-the-account-for-alice"},"Create the account")),(0,i.kt)("li",{parentName:"ul"},"Step 4. ",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-4-get-the-private-key-for-the-account-of-alice"},"Get the private key for the account")),(0,i.kt)("li",{parentName:"ul"},"Step 5. ",(0,i.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-5-get-ckb-capacity-for-the-account-of-alice"},"Get CKB capacity for the account"))),(0,i.kt)("p",null,"This is the payer's account info\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4}","{4}":!0},"address:\n  mainnet: ckb1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3suc5n7c\n  testnet: ckt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy\nlock_arg: 0xd6838b5e725103f2f1bfb58dbe64b930a857a263\nlock_hash: 0x10f9a227094e77ee9149b3e8ed1e34f6d5c7c604bab81e0df42f13e1d33ac0fb \n")),(0,i.kt)("p",null,"This is the recipient's account info\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{4}","{4}":!0},"address:\n    mainnet: ckb1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sa3npgx\n    testnet: ckt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6\n  lock_arg: 0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f\n  lock_hash: 0xc7cea924f48d069396b6826ee17653580d90d505544fa6940dbba3d24d9258ba\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"lock_arg")," in the address is similar with the ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"outputs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"{7,15}","{7,15}":!0},'  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,i.kt)("h3",{id:"witnesses"},"Witnesses"),(0,i.kt)("p",null,"In the transfer transaction case, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Witnesses")," is just contained signature which is generated by the payer's private key."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"if ",(0,i.kt)("inlineCode",{parentName:"p"},"lock script")," is 0   "),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'Witnesses = List(["0x55000000100000005500000055000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]);\n')))),(0,i.kt)("h3",{id:"summary"},"Summary"),(0,i.kt)("p",null,"The transfer transaction can be represented as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"cell_deps:\n  * point to the cell with SECP256K1 code\n\ninputs: \n  * The payer's cell\uff1apoint to previous_output\n\noutputs:\n  * the recipient's cell\n    * capacity: 0x56cc9c900\n    * lock script\n        * SECP256K1 code hash\n        * the recipient's public_key hash\n    * data: 0x\n  * the payer's cell\n    * capacity: 0x5a5f6d2bccdc\n    * lock script\n        * SECP256K1 code hash\n        * the payer's public_key hash\n    * data: 0x\n witnesses:\n    * contain the payer's signature\n  \n")),(0,i.kt)("h3",{id:"optionalhow-to-sign-the-transfer-transaction"},"(optional)How to sign the transfer transaction"),(0,i.kt)("p",null,"We need the following arguments to sign a tx\uff0cthis is the default signing solution used in CKB now. For more information,see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/wiki/How-to-sign-transaction"},"How to sign transaction")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"* pk, secp256k1 private key\n* witnesses, contains signatures of the tx.\n")),(0,i.kt)("p",null,"For more information about ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," \uff0c ",(0,i.kt)("inlineCode",{parentName:"p"},"header_deps"),"\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"since"),", see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md"},"RFC: Data Structures of Nervos CKB")))}h.isMDXComponent=!0},5258:function(e,t,n){t.Z=n.p+"assets/images/input-cell-21db726950b87b59b1467260090661c1.png"},8145:function(e,t,n){t.Z=n.p+"assets/images/secp256k1-info-f8a5ab2464d4f7bb882a67e52df08fb7.png"},2194:function(e,t,n){t.Z=n.p+"assets/images/tippy-dashboard-ea5fecdda798d59c06d985bcf1c65b72.png"}}]);