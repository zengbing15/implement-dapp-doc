"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[529],{8713:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),i=["components"],o={sidebar_position:5},l="A  DApp demo:  Felix bot",p={unversionedId:"felixbot-dapp",id:"felixbot-dapp",isDocsHomePage:!1,title:"A  DApp demo:  Felix bot",description:"Wow , \u4f60\u5df2\u7ecf\u7406\u89e3\u4e86CKB \u76f8\u5173\u7684\u91cd\u8981\u6982\u5ff5\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 lumos \u5f00\u53d1 DApp\uff0c\u662f\u65f6\u5019\u6765\u5f00\u53d1\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u7684 DApp demo \u4e86~",source:"@site/docs/felixbot-dapp.md",sourceDirName:".",slug:"/felixbot-dapp",permalink:"/implement-dapp-docs/felixbot-dapp",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/felixbot-dapp.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"A transfer-tx DApp demo",permalink:"/implement-dapp-docs/transfer-tx-dapp-demo"},next:{title:"Felix bot: Confirm signing message",permalink:"/implement-dapp-docs/felixbot-confirm-message"}},d=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Set up the Development Environment",id:"set-up-the-development-environment",children:[]},{value:"Prepare three CKB accounts",id:"prepare-three-ckb-accounts",children:[]},{value:"\u8bbe\u7f6e Alice \u4f5c\u4e3a DevChain \u7684 miner to get capacity",id:"\u8bbe\u7f6e-alice-\u4f5c\u4e3a-devchain-\u7684-miner-to-get-capacity",children:[]},{value:"Use CKB-CLI  to transfer some CKB tokens to Bob",id:"use-ckb-cli--to-transfer-some-ckb-tokens-to-bob",children:[]},{value:"Set up a telegram bot",id:"set-up-a-telegram-bot",children:[]}]},{value:"Run the felix bot",id:"run-the-felix-bot",children:[{value:"Install dependencies",id:"install-dependencies",children:[]},{value:"Set up the proxy server",id:"set-up-the-proxy-server",children:[]},{value:"Set up the BOT_TOKEN",id:"set-up-the-bot_token",children:[]}]},{value:"Set up the Configuration for Lumos",id:"set-up-the-configuration-for-lumos",children:[]},{value:"Use parseAddress to confirm receiving address",id:"use-parseaddress-to-confirm-receiving-address",children:[]},{value:"Build the transaction skeleton",id:"build-the-transaction-skeleton",children:[]},{value:"Sign the transaction offline",id:"sign-the-transaction-offline",children:[{value:"Use ckb-cli to sign the transaction",id:"use-ckb-cli-to-sign-the-transaction",children:[]}]},{value:"Seal the transaction with the generated signature",id:"seal-the-transaction-with-the-generated-signature",children:[]},{value:"Send the finalized transaction to the CKB network",id:"send-the-finalized-transaction-to-the-ckb-network",children:[]}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"a--dapp-demo--felix-bot"},"A  DApp demo:  Felix bot"),(0,s.kt)("p",null,"Wow , \u4f60\u5df2\u7ecf\u7406\u89e3\u4e86CKB \u76f8\u5173\u7684\u91cd\u8981\u6982\u5ff5\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 lumos \u5f00\u53d1 DApp\uff0c\u662f\u65f6\u5019\u6765\u5f00\u53d1\u4e00\u4e2a\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u7684 DApp demo \u4e86~"),(0,s.kt)("p",null,"Felix bot \u57fa\u4e8e ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/botgram/botgram"},"botgram")," \u5f00\u53d1\u7684\uff0c\u53ef\u4ee5\u7ed9 telegram group member \u53d1\u9001 CKB \u7ea2\u5305\u3002\u5b9e\u9645\u4e0a\u8fd9\u4e2a DApp demo \u4e5f\u9700\u8981\u5b9e\u73b0\u8f6c\u8d26\u4ea4\u6613\uff0c\u53ea\u4e0d\u8fc7\u9664\u4e86\u8f6c\u8d26\u4ea4\u6613\u8fd8\u4f1a\u6709\u5176\u4ed6\u4e0e CKB \u4ea4\u4e92\u7684\u9700\u6c42\u3002\u4e3a\u4e86\u66f4\u52a0\u76f4\u89c2\u7406\u89e3 DApp \u5ba2\u6237\u7aef\uff0c\u540e\u7aef\uff0c\u4e0eCKB layer1 \u4e4b\u95f4\u7684\u4ea4\u4e92\uff0c\u4f60\u53ef\u4ee5\u4e00\u8fb9\u8fd0\u884c felix bot \u4e00\u8fb9\u6765\u770b\u76f8\u5173\u4ee3\u7801\u3002"),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("h3",{id:"set-up-the-development-environment"},"Set up the Development Environment"),(0,s.kt)("p",null,"\u8bf7\u53c2\u8003 ",(0,s.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),"  \u6839\u636e\u4f60\u7684 Operating System \u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002"),(0,s.kt)("h3",{id:"prepare-three-ckb-accounts"},"Prepare three CKB accounts"),(0,s.kt)("p",null," Create three accounts: Alice and Bob and Charlie\uff0csee ",(0,s.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/preparation/createaccount"},"Create Accounts"),". "),(0,s.kt)("h3",{id:"\u8bbe\u7f6e-alice-\u4f5c\u4e3a-devchain-\u7684-miner-to-get-capacity"},"\u8bbe\u7f6e Alice \u4f5c\u4e3a DevChain \u7684 miner to get capacity"),(0,s.kt)("p",null,"see ",(0,s.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-5-get-ckb-capacity-for-the-account-of-alice"},"Step 5. Get CKB capacity for the account of Alice")),(0,s.kt)("h3",{id:"use-ckb-cli--to-transfer-some-ckb-tokens-to-bob"},"Use CKB-CLI  to transfer some CKB tokens to Bob"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ ckb-cli --from-account <ALICE's lock_arg> --to-address <Bob's address> --capacity <capacity> --tx-fee <tx-fee || 0.01>\n")),(0,s.kt)("p",null,"Bob \u4f5c\u4e3a\u8f6c\u8d26\u4ea4\u6613\u7684\u53d1\u9001\u65b9\uff0cCharlie \u5219\u662f\u63a5\u6536\u65b9"),(0,s.kt)("h3",{id:"set-up-a-telegram-bot"},"Set up a telegram bot"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create a telegram bot, see ",(0,s.kt)("a",{parentName:"li",href:"https://core.telegram.org/bots#3-how-do-i-create-a-bot"},"3. How do I create a bot?")),(0,s.kt)("li",{parentName:"ul"},"Send a list of commands to BotFather ")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"start - start\nhelp - help\nset_receiving_address - Set receiving address\nreceiving_address - Get receiving address\npending_envelopes - List of pending envelopes sent by me\npay - Pay an envelope\nsend - send envelopes\n")),(0,s.kt)("h2",{id:"run-the-felix-bot"},"Run the felix bot"),(0,s.kt)("h3",{id:"install-dependencies"},"Install dependencies"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ https://github.com/zengbing15/felix.git\n$ cd felix \n$ npm install\n")),(0,s.kt)("h3",{id:"set-up-the-proxy-server"},"Set up the proxy server"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"export https_proxy=http://127.0.0.1:10080;export http_proxy=http://127.0.0.1:10080;export all_proxy=socks5://127.0.0.1:10081\n")),(0,s.kt)("h3",{id:"set-up-the-bot_token"},"Set up the BOT_TOKEN"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ export BOT_TOKEN=`<BOT_TOKEN>`\n")),(0,s.kt)("h2",{id:"set-up-the-configuration-for-lumos"},"Set up the Configuration for Lumos"),(0,s.kt)("p",null,"\u56e0\u4e3a\u53d1\u7ea2\u5305\u7684\u884c\u4e3a\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2a\u8f6c\u8d26\u4ea4\u6613\uff0c\u8981\u7528\u5230 lumos, \u6240\u4ee5\u5148\u914d\u7f6e\u597d Lumos Config Manager and Lumos Indexer"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const { Indexer } = require("@ckb-lumos/indexer");\nconst { initializeConfig, getConfig } = require("@ckb-lumos/config-manager");\nprocess.env.LUMOS_CONFIG_FILE = process.env.LUMOS_CONFIG_FILE || \'./config.json\'\ninitializeConfig();\nconst CKB_CONFIG = getConfig();\n\nprocess.env.LUMOS_CONFIG_FILE = process.env.LUMOS_CONFIG_FILE || \'./config.json\'\ninitializeConfig();\nconst CKB_CONFIG = getConfig();\n\nconst CKB_RPC_URI = process.env.CKB_RPC_URI || "http://127.0.0.1:8114";\nconst CKB_INDEXER_DATA = process.env.CKB_INDEXER_DATA || "./indexer-data";\nconst indexer = new Indexer(CKB_RPC_URI, CKB_INDEXER_DATA);\nindexer.startForever();\n')),(0,s.kt)("p",null,"For a sender, you can "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"/send@botname  send \u53d1\u7ea2\u5305\u547d\u4ee4, \u80fd\u591f Grab \u7684\u6b21\u6570\uff0c\u4e5f\u5c31\u662f\u6240\u663e\u793a\u7684 remaining\uff1anumber \u4e0d\u8d85\u8fc7 group chat member")),(0,s.kt)("p",null,"[Image: image.png]","\nFor a grabber, you can"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"set your receiving address: Charlie\u2019s address"),(0,s.kt)("li",{parentName:"ul"},"Grab the red package ")),(0,s.kt)("p",null,"[Image: image.png]"),(0,s.kt)("h2",{id:"use-parseaddress-to-confirm-receiving-address"},"Use ",(0,s.kt)("a",{parentName:"h2",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#parseaddress"},"parseAddress")," to confirm receiving address"),(0,s.kt)("p",null,"\u5728 Address and Lock Script \u90e8\u5206\uff0c\u63d0\u5230 "),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},'\u5730\u5740 packages a lock script into a single line in a verifiable and human-readable format.\uff0c"ckt" is for the testnet or devchain. ')),(0,s.kt)("p",null,"\u6240\u4ee5\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"parseAddress"),"  \u5bf9\u8f93\u5165\u7684\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u5224\u65ad\u662f\u5426 return ",(0,s.kt)("inlineCode",{parentName:"p"},"Script"),"  type, \u5982\u679c\u6ca1\u6709\uff0c\u5219\u8fdb\u884c\u63d0\u793a\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"CKB_CONFIG.PREFIX"),"\u8868\u793a\u4e86 the  address prefix ",(0,s.kt)("inlineCode",{parentName:"p"},"PREFIX")," of  current running chain ",(0,s.kt)("inlineCode",{parentName:"p"},"CKB_CONFIG")," object "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const {parseAddress} = require("@ckb-lumos/helpers");\n\n  [DATA_RECEIVING_ADDRESS]: async (session, msg, reply) => {\n    const address = msg.text || "";\n    try {\n      parseAddress(address);\n    } catch (e) {\n      console.log(`Error parsing address: ${e}`);\n      reply.text(\n        `Please use a valid CKB address that starts with ${CKB_CONFIG.PREFIX}!`\n      );\n      return DATA_RECEIVING_ADDRESS;\n    }\n    await storage.put(`address:${msg.from.id}`, address);\n    reply.text(`Setting your receiving address to ${address}!`);\n    return null;\n  },\n')),(0,s.kt)("p",null,"Felix \u901a\u8fc7 grabber \u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"Grab "),"\u884c\u4e3a\u83b7\u5f97 grabber \u7684 user.id \u548c address"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  async grab(receiverId, storage) {\n    if (this.remaining() <= 0) {\n      throw new Error("You are too late!");\n    }\n    if (this.receivers.find((receiver) => receiver.id === receiverId)) {\n      throw new Error("You have already grabbed one!");\n    }\n    let address;\n    try {\n      address = (await storage.get(`address:${receiverId}`)).toString();\n    } catch (e) {\n      throw new Error("Please click on me, and set your receiving address in a private chat!");\n    }\n    this.receivers.push({\n      id: receiverId,\n      address,\n    });\n  }\n')),(0,s.kt)("p",null,"For a sender , you can "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"select a envelope to pay"),(0,s.kt)("li",{parentName:"ul"},"enter the CKBytes to pay for the red envelope"),(0,s.kt)("li",{parentName:"ul"},"enter the address used to pay for the red envelope: Bob\u2019s address")),(0,s.kt)("p",null,"[Image: image.png]"),(0,s.kt)("h2",{id:"build-the-transaction-skeleton"},"Build the transaction skeleton"),(0,s.kt)("p",null,"\u8fd9\u65f6\u5019\u5df2\u7ecf\u83b7\u53d6\u5230\u4e86\u8f6c\u8d26\u6240\u9700\u7684\u8db3\u591f\u7684\u4fe1\u606f\uff08\u4ea4\u6613\u53cc\u65b9\u5730\u5740\uff0c\u8f6c\u8d26\u91d1\u989d\uff09\uff0c\u5e76\u4e14\u67e5\u627e\u5230\u9700\u8981\u8f6c\u8d26\u7ed9 Grab \u7ea2\u5305\u7684\u4eba\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"currentAmount")," ,\u7136\u540e\u5c31\u6309\u6b65\u9aa4 build txSkeleton\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create a transaction skeleton"),(0,s.kt)("li",{parentName:"ul"},"Add the transaction fee"),(0,s.kt)("li",{parentName:"ul"},"Prepare the signing entries ")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"let txSkeleton = TransactionSkeleton({ cellProvider: indexer });\n    const fromInfos = [fromAddress]\n\n......\n\n      txSkeleton = await common.transfer(\n        txSkeleton,\n        fromInfos,\n        receiver.address,\n        currentAmount + BigInt(61) * SHANNONS,\n      );\n    }\n    \n       // use `payFeeByFeeRate` to set dynamic tx fee\n    txSkeleton = await common.payFeeByFeeRate(\n      txSkeleton, \n      fromInfos, \n      FEE_RATE,\n      );\n    txSkeleton = common.prepareSigningEntries(txSkeleton);\n   \n")),(0,s.kt)("p",null,"\u4e4b\u540e felix bot reply ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," in signingEntries object "),(0,s.kt)("p",null,"[Image: image.png]"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'    ......\n    const signingInfos = txSkeleton\n      .get("signingEntries")\n      .map((e) => {\n        const lock = txSkeleton.get("inputs").get(e.index).cell_output.lock;\n        const address = generateAddress(lock);\n        return `Address: ${address}\\nMessage: ${e.message}`;\n      })\n      .toArray()\n      .join("\\n");\n    reply.text(\n      `Please sign the following messages required by the transaction:\\n\\n${signingInfos}\\n\\nSignatures must be in hex string format with 0x prefix, each different signature should occupy its own line.`\n    );\n    return DATA_PAY_SIGNING;\n  },\n')),(0,s.kt)("h2",{id:"sign-the-transaction-offline"},"Sign the transaction offline"),(0,s.kt)("p",null,"\u4e3a\u4e86\u4fdd\u8bc1\u5b89\u5168\uff0cTransaction assembling and transaction signing should be separated. It\u2019s recommended to use ckb-cli to sign the transaction  to generate the signature. "),(0,s.kt)("p",null,"For a grabber, you can"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Use ckb-cli to sign the transaction")),(0,s.kt)("h3",{id:"use-ckb-cli-to-sign-the-transaction"},"Use ckb-cli to sign the transaction"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The CKB pre-built installer package includes the ckb-cli tool, see ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbnode/#step-1-download-the-ckb-pre-built-installer-package"},"Download the CKB pre-built installer package"),". "),(0,s.kt)("li",{parentName:"ul"},"generate the signature ")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ ckb-cli util sign-message --recoverable --from-account <bob's lock_arg> --message <signing message>\n")),(0,s.kt)("p",null,"The following is a signature output example\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Password: \npath: m\nrecoverable: true\nsignature: 0xd75d630994f862b43c52dc5dfd22306b9fec4112e751a5daf40fef7da0db05d7506a3494b63d7546dbdd2ea93af61f939d162fe7b8fe45da3ef929493a22762600\n")),(0,s.kt)("h2",{id:"seal-the-transaction-with-the-generated-signature"},"Seal the transaction with the generated signature"),(0,s.kt)("p",null,"For a grabber, you can"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Commit the generated signature to felix bot.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},' [DATA_PAY_SIGNING]: async (session, msg, reply) => {\n    const envelope = session[DATA_PAY];\n    const amount = session[DATA_PAY_AMOUNT];\n    const txSkeleton = session[DATA_PAY_ADDRESS];\n\n    console.log(JSON.stringify(txSkeleton,null,2));\n\n    const signatures = (msg.text || "").split("\\n");\n    let tx;\n    try {\n      tx = sealTransaction(txSkeleton, signatures);\n    } catch (e) {\n\n      console.log(`Error sealing transaction: ${e} stack: ${e.stack}`);\n      reply.text("Invalid signatures!");\n      return DATA_PAY_SIGNING;\n    }  \n    \n')),(0,s.kt)("h2",{id:"send-the-finalized-transaction-to-the-ckb-network"},"Send the finalized transaction to the CKB network"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"    const txHash = await rpc.send_transaction(tx);\n\n    reply.text(`Envelope successfully paid! TX hash: ${txHash}`);\n    delete session[DATA_PAY];\n    delete session[DATA_PAY_AMOUNT];\n    delete session[DATA_PAY_ADDRESS];\n")),(0,s.kt)("p",null,"[Image: image.png]"))}u.isMDXComponent=!0}}]);