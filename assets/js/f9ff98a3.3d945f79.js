"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[464],{824:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return r},default:function(){return u}});var a=n(7462),c=n(3366),s=(n(7294),n(3905)),i=["components"],o={id:"rpc-and-transaction",title:"RPC and Transaction",sidebar_position:3},p=void 0,l={unversionedId:"rpc-and-transaction",id:"rpc-and-transaction",isDocsHomePage:!1,title:"RPC and Transaction",description:"RPC",source:"@site/docs/rpc-and-transaction.md",sourceDirName:".",slug:"/rpc-and-transaction",permalink:"/implement-dapp-docs/rpc-and-transaction",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/rpc-and-transaction.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"rpc-and-transaction",title:"RPC and Transaction",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Before We Get Started",permalink:"/implement-dapp-docs/before-we-get-started"},next:{title:"A transfer-tx DApp demo",permalink:"/implement-dapp-docs/transfer-tx-dapp-demo"}},r=[{value:"RPC",id:"rpc",children:[{value:"Set Up the Development Environment",id:"set-up-the-development-environment",children:[]},{value:"Connect to CKB node through RPC",id:"connect-to-ckb-node-through-rpc",children:[]}]},{value:"A transfer transaction on CKB Testnet",id:"a-transfer-transaction-on-ckb-testnet",children:[{value:"Inputs and Outputs",id:"inputs-and-outputs",children:[]},{value:"Cell",id:"cell",children:[]},{value:"cell_deps and Witnesses",id:"cell_deps-and-witnesses",children:[]},{value:"Lock Script",id:"lock-script",children:[]},{value:"Address and Lock Script",id:"address-and-lock-script",children:[]},{value:"Create CKB accounts",id:"create-ckb-accounts",children:[]},{value:"Witnesses",id:"witnesses",children:[]},{value:"\u603b\u7ed3\uff0c\u8fd9\u7b14 \u8f6c\u8d26\u4ea4\u6613\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837\uff1a",id:"\u603b\u7ed3\u8fd9\u7b14-\u8f6c\u8d26\u4ea4\u6613\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837",children:[]},{value:"How to sign the transfer transaction",id:"how-to-sign-the-transfer-transaction",children:[]}]}],d={toc:r};function u(e){var t=e.components,o=(0,c.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"rpc"},"RPC"),(0,s.kt)("p",null,"First run a CKB node,then use @ckb-lumos/rpc (the RPC component in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/lumos"},"Lumos"),") to interact with CKB network\uff0ccommunicating block and transaction information with CKB nodes."),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Lumos is a very handy development tool. CKB DApps can be developed upon lumos. ",(0,s.kt)("a",{parentName:"p",href:"transfer-tx-dapp-demo"},"A transfer-tx DApp demo")," will introduce how to develop DApps upon lumos step by step. "))),(0,s.kt)("h3",{id:"set-up-the-development-environment"},"Set Up the Development Environment"),(0,s.kt)("p",null,"See",(0,s.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),",then you will run a CKB node on Dev Chain by using ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/tippy"},"Tippy"),"."),(0,s.kt)("p",null,"An example of Tippy's dashboard "),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Example dashboard",src:n(2194).Z})),(0,s.kt)("h3",{id:"connect-to-ckb-node-through-rpc"},"Connect to CKB node through RPC"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$yarn add @ckb-lumos/rpc\n")),(0,s.kt)("p",null,"Get the blockchain info"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'const { RPC } = require(`"@ckb-lumos/rpc"`);\nconst rpc = `new`` RPC``("http://localhost:8114"``);`\nasync function main(){\n    const result = await rpc.get_blockchain_info();\n    console.log(result);\n}\nmain();\n')),(0,s.kt)("p",null,"An example of the blockchain info:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"  alerts: [],\n  chain: 'ckb_dev',\n  difficulty: '0x100',\n  epoch: '0x64005b0000bc',\n  is_initial_block_download: false,\n  median_time: '0x17b9c952a1d'\n")),(0,s.kt)("p",null,"The full code of the example can be found ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/zengbing15/simple-dapp-demo/tree/main/call-rpc"},"here"),"."),(0,s.kt)("p",null,"Great! Now you have got your foot in the door! "),(0,s.kt)("h2",{id:"a-transfer-transaction-on-ckb-testnet"},"A transfer transaction on CKB Testnet"),(0,s.kt)("p",null,"At its core, a blockchain is a ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/State_machine_replication"},"replicated deterministic state machine"),".A state machine is a computer science concept whereby a machine can have multiple states, but only one at any given time. There is a state, which describes the current state of the system, and ",(0,s.kt)("inlineCode",{parentName:"p"},"transactions"),", that trigger state transitions.Given a state S and a transaction T, the state machine will return a new state S'."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| State  |  \n|        |             \n+--------+                 \n    |\n    | transactions\n    |\n+--------+                 \n|        |                 \n| State' |  \n|        |             \n+--------+ \n\n")),(0,s.kt)("p",null,"Nervos CKB Layer1 also follows this logic, the following is a transfer transaction on CKB Aggron Testnet, the following is the state transition triggered by the transfer transaction:"),(0,s.kt)("p",null,"The payer's address\uff1ackt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy\nThe recipient's address\uff1ackt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6"),(0,s.kt)("p",null,"An example of transfer transaction on CKB Aggron Testnet"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n  "version": "0x0",\n  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n  "header_deps": [],\n  "inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,s.kt)("p",null,"The transaction JSON code looks a bit complicated, don't panic, let's look through ",(0,s.kt)("inlineCode",{parentName:"p"},"Inputs and Outputs")," first. "),(0,s.kt)("h3",{id:"inputs-and-outputs"},"Inputs and Outputs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'"inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n')),(0,s.kt)("p",null,"You may find that there are two objects in the ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," that are similar in structure (put aside the ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs")," now)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n   "outputs_data": [\n    "0x",\n    "0x"\n  ],\n')),(0,s.kt)("p",null,"You got it!  This is called ",(0,s.kt)("inlineCode",{parentName:"p"},"Cell")," which is the best design about Nervos CKB!"),(0,s.kt)("h3",{id:"cell"},"Cell"),(0,s.kt)("p",null,"Cells are the primary state units in CKB, so the state transition can be represented:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| Cells  |  \n|        |             \n+--------+                 \n    |\n    | transfer transaction\n    |\n+--------+                 \n|        |                 \n| Cells' |  \n|        |             \n+--------+  \n\n")),(0,s.kt)("p",null," A cell has the following fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Cell: {\n //field name: type\n   capacity: Uint64\n   lock: Script\n   type: Script\n   data: Bytes\n   } \n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"capacity\uff1a"),"Size limit of the cell, also the number of native tokens owned by the cell."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"lock\uff1a"),"If you think of Cell as a box\uff0cit's a lock of the box. Every cell has a lock script."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"type:")," Another type of lock with different uses\uff0cit's optional."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"data:")," State data stored in this cell, could be any format.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"outputs_data"),": The actual data are kept separated for the ease of CKB script handling and for the possibility of future optimizations.")))),(0,s.kt)("p",null,"You will find a field called ",(0,s.kt)("inlineCode",{parentName:"p"},'"previous_output"')," in ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'"inputs": [\n    {\n      "since": "0x0",\n      "previous_output": {\n        "tx_hash": "0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1",\n        "index": "0x1"\n      }\n    }\n  ],\n')),(0,s.kt)("p",null,"The field's name have been fully expressed: ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs"),"is the ",(0,s.kt)("inlineCode",{parentName:"p"},"previous_output"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs")," can be indexed through ",(0,s.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index"),".If you open ",(0,s.kt)("a",{parentName:"p",href:"https://explorer.nervos.org/aggron/transaction/0xb2d676c6215be0166b5b048396f581b3a0620db6ae879a3556cd8561cbec8ce1"},"CKB-Explorer")," \uff08switch to AGGRON\uff09 \uff0cSearch for ",(0,s.kt)("inlineCode",{parentName:"p"},"tx_hash"),", you will find the ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs"),"with the similar address of the payer's address."),(0,s.kt)("p",null,"An Example usage of CKB-Explorer"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"An Example usage of CKB-Explorer",src:n(5258).Z})),(0,s.kt)("p",null,"In conclusion, the essence of the transaction is to spend some cells, and then generate some new cells, which will also become input cells that need to be spent in another transaction. The unspent cells are called live cells. This concepts are similar to that of ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Unspent_transaction_output"},"UTXO")," in Bitcoin's terminology. "),(0,s.kt)("p",null,"the state transition can be represented:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"+--------+                 \n|        |                 \n| Cell A |  \n|        |             \n+--------+                 \n    |\n    | transfer transaction\n    |\n+--------+                 \n|        |                 \n| Cell B |\n| Cell C |\n|        |             \n+--------+  \n\n")),(0,s.kt)("h3",{id:"cell_deps-and-witnesses"},"cell_deps and Witnesses"),(0,s.kt)("p",null,"Come to ",(0,s.kt)("inlineCode",{parentName:"p"},"cell_deps")," first, have you found out? ",(0,s.kt)("inlineCode",{parentName:"p"},"out_point")," also made up of ",(0,s.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index"),", so    ",(0,s.kt)("inlineCode",{parentName:"p"},"cell_deps")," is actually pointed to a cell with ",(0,s.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index"),", so what is this cell for?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n')),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/blob/master/c/secp256k1_blake160_sighash_all.c"},"SECP256K1_BLAKE160")," is a piece of code using the same secp256k1 signature verification algorithm as used in bitcoin.It is the default lock script used to protect the ownership of each cell. "),(0,s.kt)("p",null,"There is one cell created in the genesis block and SECP256K1_BLAKE160 code is compiled and put in the ",(0,s.kt)("inlineCode",{parentName:"p"},"data")," field of the cell. The transfer transaction should use it as ",(0,s.kt)("inlineCode",{parentName:"p"},"cell_deps")," to protect cells in ",(0,s.kt)("inlineCode",{parentName:"p"},"inputs and outputs"),"."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"tx_hash")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," are the same with ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-system-script-list/0024-ckb-system-script-list.md#locks"},"SECP256K1_BLAKE160 info"),"."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Secp256k1-info",src:n(8145).Z})),(0,s.kt)("p",null,"The info of secp256k1 cell in Aggron Testnet."),(0,s.kt)("h3",{id:"lock-script"},"Lock Script"),(0,s.kt)("p",null,"So what is the specific mode of operation?"),(0,s.kt)("p",null,"The type of the lock script is ",(0,s.kt)("inlineCode",{parentName:"p"},"Script"),"\uff0c A cell has the following fields:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Script: {\n// field name: type\n   code_hash: H256(hash)\n   args: Bytes\n   hash_type: String, could be `type` or `data`\n   } \n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"hash_type")," means that the interpretation of code hash when looking for matched dep cells. The default lock script should be ",(0,s.kt)("inlineCode",{parentName:"p"},"type"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Lock Script: {\n   code_hash: H256(hash)\n   args: Bytes\n   hash_type: type\n   } \n")),(0,s.kt)("p",null,"\u5728 code_hash \u586b\u4e0a dep_cell \u7684 code hash\uff0c\u540c\u65f6\u5728 args \u5b57\u6bb5\u653e\u5165\u81ea\u5df1\u7684\u516c\u94a5\u54c8\u5e0c\uff0c \u53d1\u8d77\u4ea4\u6613\u65f6\uff0c \u5c31\u7528\u79c1\u94a5\u5bf9\u8fd9\u7b14\u4ea4\u6613\u505a\u4e00\u4e2a\u7b7e\u540d\uff0cWitnesses \u653e\u7684\u5c31\u662f\u8fd9\u4e2a\u7b7e\u540d\u3002\u8fd9\u6837SECP256K1 \u52a0\u5bc6\u7b97\u6cd5\u8f93\u5165\u516c\u94a5\u548c\u7b7e\u540d\uff0c\u5c31\u80fd\u5224\u65ad\u8fd9\u7b14\u4ea4\u6613\u662f\u4e0d\u662f\u7531\u5bf9\u5e94\u7684\u79c1\u94a5\u53d1\u8d77\u7684\uff0c \u4ece\u800c\u4e5f\u5c31\u80fd\u5224\u65ad\u80cc\u540e\u662f\u4e0d\u662f\u8fd9\u4e2a Cell \u771f\u6b63\u7684\u4e3b\u4eba\u5728\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u4fdd\u8bc1\u4e86 Cell \u7684\u6240\u5c5e\u6743\u3002"),(0,s.kt)("p",null,"\u5bf9\u6bd4 ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0024-ckb-system-script-list/0024-ckb-system-script-list.md#locks"},"SECP256K1_BLAKE160 \u7684 info"),"  \u7684 code_hash \u4e0e output cells \u4e2d\u7684 code_hash \u662f \u4e00\u81f4\u7684\u3002"),(0,s.kt)("p",null,"[Image: image.png]"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  "cell_deps": [\n    {\n      "out_point": {\n        "tx_hash": "0xf8de3bb47d055cdf460d93a2a6e1b05f7432f9777c8c474abf4eec1d4aee5d37",\n        "index": "0x0"\n      },\n      "dep_type": "dep_group"\n    }\n  ],\n  ......\n  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,s.kt)("h3",{id:"address-and-lock-script"},"Address and Lock Script"),(0,s.kt)("p",null,"\u6700\u540e\u8fd8\u9700\u8981\u4f60\u7406\u89e3\u4e00\u4e2a\u4e1c\u897f\uff0c\u5c31\u662f\u8f6c\u8d26\u4ea4\u6613\u53cc\u65b9\u7684 Address\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u53d1\u9001\u65b9\u5730\u5740\uff1ackt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy"),(0,s.kt)("li",{parentName:"ul"},"\u63a5\u6536\u65b9\u5730\u5740\uff1ackt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6")),(0,s.kt)("p",null,'\u5728 CKB \u4e2d\uff0cAccount \u5c31\u662f\u4e00\u5806 live cell \u7684\u96c6\u5408\uff0c\u5177\u6709\u540c\u6837\u7684 lock\uff0c\u5730\u5740 packages a lock script into a single line in a verifiable and human-readable format. \u6240\u4ee5 address \u5c31\u4ee3\u8868\u4e86 account \uff0c\u6b64\u5916\u5730\u5740\u8fd8\u9075\u5faa\u4e00\u5b9a\u7684 format\uff0c"ckt" is for the testnet or devchain, see ',(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0021-ckb-address-format/0021-ckb-address-format.md#ckb-address-format"},"RFC: CKB Address Format")),(0,s.kt)("p",null,"private key, public key\uff08args\uff09, lock script, and CKB address \u4e4b\u95f4\u7684\u5173\u7cfb\u662f\u8fd9\u6837\u7684\uff1a\n","[Image: image.png]"),(0,s.kt)("h3",{id:"create-ckb-accounts"},"Create CKB accounts"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-cli"},"CKB-CLI")," \u53ef\u4ee5\u7528\u6765\u751f\u6210 account \u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\uff0c see ",(0,s.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#create-the-accounts-by-using-ckb-cli"},"Create the Accounts by Using ckb-cli")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Prerequisites\uff1a",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Run a CKB Node on DEV Chain by Using Tippy")),(0,s.kt)("li",{parentName:"ul"},"Step 1. ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-1-download-the-ckb-pre-built-installer-package"},"Download the CKB pre-built installer package"),"."),(0,s.kt)("li",{parentName:"ul"},"Step 2. ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-2-verify-the-ckb-cli-tool-is-working-and-check-the-version"},"Verify the ckb-cli tool is working and check the version"),"."),(0,s.kt)("li",{parentName:"ul"},"Step 3. ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-3-create-the-account-for-alice"},"Create the account")),(0,s.kt)("li",{parentName:"ul"},"Step 4. ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-4-get-the-private-key-for-the-account-of-alice"},"Get the private key for the account")),(0,s.kt)("li",{parentName:"ul"},"Step 5. ",(0,s.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-5-get-ckb-capacity-for-the-account-of-alice"},"Get CKB capacity for the account"))),(0,s.kt)("p",null,"\u8fd9\u662f\uff1ackt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy \u7684 info"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"address:\n  mainnet: ckb1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3suc5n7c\n  testnet: ckt1qyqddquttee9zqlj7xlmtrd7vjunp2zh5f3spa2vjy\nlock_arg: 0xd6838b5e725103f2f1bfb58dbe64b930a857a263\nlock_hash: 0x10f9a227094e77ee9149b3e8ed1e34f6d5c7c604bab81e0df42f13e1d33ac0fb \n")),(0,s.kt)("p",null,"\u8fd9\u662f\uff1ackt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6 \u7684info"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"address:\n    mainnet: ckb1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sa3npgx\n    testnet: ckt1qyqv70xf5cusptp0gwzqj8ewsen7j2c0aa8sq5d7y6\n  lock_arg: 0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f\n  lock_hash: 0xc7cea924f48d069396b6826ee17653580d90d505544fa6940dbba3d24d9258ba\n")),(0,s.kt)("p",null,"\u5bf9\u6bd4 \u8fd9\u4e24\u4e2a\u5730\u5740\u7684 lock_arg \u548c output cells \u7684 args \u662f\u4e00\u81f4\u7684\u3002"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'  "outputs": [\n    {\n      "capacity": "0x56cc9c900",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xcf3cc9a63900ac2f4384091f2e8667e92b0fef4f"\n      }\n    },\n    {\n      "capacity": "0x5a5f6d2bccdc",\n      "lock": {\n        "code_hash": "0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8",\n        "hash_type": "type",\n        "args": "0xd6838b5e725103f2f1bfb58dbe64b930a857a263"\n      }\n    }\n  ],\n  "outputs_data": [\n    "0x",\n    "0x"\n  ],\n  "witnesses": [\n    "0x550000001000000055000000550000004100000078aa17dc603d72b8dcd7d214f9a6e4bb4bbf6c77f172a66d889f3958aa16f8a812e6b7d3e3ed56f361d255b7a834bdbc2e69442da536e2ae7a0b3feffa2b556f01"\n  ]\n}\n')),(0,s.kt)("h3",{id:"witnesses"},"Witnesses"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"contained signature which is generated by \u53d1\u9001\u65b9 private_key")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"// witness = {lock is 0, input_type is null, output_type is null}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Witnesses = List(["0x55000000100000005500000055000000410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"]);\n')),(0,s.kt)("h3",{id:"\u603b\u7ed3\u8fd9\u7b14-\u8f6c\u8d26\u4ea4\u6613\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837"},"\u603b\u7ed3\uff0c\u8fd9\u7b14 \u8f6c\u8d26\u4ea4\u6613\u53ef\u4ee5\u8868\u793a\u6210\u8fd9\u6837\uff1a"),(0,s.kt)("p",null,"Cell_deps:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"point to the cell with SECP256K1 code")),(0,s.kt)("p",null,"Inputs: "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u53d1\u9001\u65b9Cell\uff1apoint to previous_output")),(0,s.kt)("p",null,"Outputs:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u63a5\u6536\u65b9 Cell",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"capacity: 0x56cc9c900"),(0,s.kt)("li",{parentName:"ul"},"lock script",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"SECP256K1 code hash"),(0,s.kt)("li",{parentName:"ul"},"\u63a5\u6536\u65b9 public_key hash"))),(0,s.kt)("li",{parentName:"ul"},"data: 0x"))),(0,s.kt)("li",{parentName:"ul"},"\u53d1\u9001\u65b9 \u65b0 Cell",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"capacity: 0x5a5f6d2bccdc"),(0,s.kt)("li",{parentName:"ul"},"lock script",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"SECP256K1 code hash"),(0,s.kt)("li",{parentName:"ul"},"\u53d1\u9001\u65b9 public_key hash"))),(0,s.kt)("li",{parentName:"ul"},"data: 0x")))),(0,s.kt)("p",null,"\u6700\u7ec8\u7528 \u79c1\u94a5\u5bf9\u8fd9\u7b14\u4ea4\u6613\u8fdb\u884c\u7b7e\u540d\u5e76\u53d1\u9001\u4e0a\u94fe\u3002"),(0,s.kt)("h3",{id:"how-to-sign-the-transfer-transaction"},"How to sign the transfer transaction"),(0,s.kt)("p",null,"We need the following arguments to sign a tx\uff0c see ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-system-scripts/wiki/How-to-sign-transaction"},"How to sign transaction")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"`* pk, secp256k1 private key\n* witnesses, contains signatures of the tx.`\n")),(0,s.kt)("p",null,"this is the default signing solution used in CKB now."),(0,s.kt)("p",null,"\u5269\u4e0b\u7684\u5b57\u6bb5 ",(0,s.kt)("inlineCode",{parentName:"p"},"version")," \uff0c ",(0,s.kt)("inlineCode",{parentName:"p"},"header_deps"),"\uff0c",(0,s.kt)("inlineCode",{parentName:"p"},"since")," \u8ddf\u672c\u6587\u6863\u5185\u5bb9\u5173\u7cfb\u4e0d\u5927\uff0c",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0019-data-structures/0019-data-structures.md"},"see RFC: Data Structures of Nervos CKB")))}u.isMDXComponent=!0},5258:function(e,t,n){t.Z=n.p+"assets/images/input-cell-21db726950b87b59b1467260090661c1.png"},8145:function(e,t,n){t.Z=n.p+"assets/images/secp256k1-info-f8a5ab2464d4f7bb882a67e52df08fb7.png"},2194:function(e,t,n){t.Z=n.p+"assets/images/tippy-dashboard-ea5fecdda798d59c06d985bcf1c65b72.png"}}]);