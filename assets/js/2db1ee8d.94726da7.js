"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[855],{6993:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:4},l="A transfer-tx  DApp demo",p={unversionedId:"tansfer-tx-dapp",id:"tansfer-tx-dapp",isDocsHomePage:!1,title:"A transfer-tx  DApp demo",description:"\u53ef\u80fd\u4f60\u4f1a\u6709\u987e\u8651\uff0c\u867d\u7136\u5df2\u7ecf\u7406\u89e3\u4e86 CKB \u7684\u4ea4\u6613\uff0c\u53ef\u662f\u8fd9\u4e48\u590d\u6742\u7684\u4ea4\u6613\u5fc5\u987b\u624b\u52a8\u62fc\u51fa\u6765\u5417\uff1f",source:"@site/docs/tansfer-tx-dapp.md",sourceDirName:".",slug:"/tansfer-tx-dapp",permalink:"/implement-dapp-docs/tansfer-tx-dapp",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tansfer-tx-dapp.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Implement a Transfer-Tx DApp demo \u6240\u9700\u77e5\u8bc6",permalink:"/implement-dapp-docs/implement-a-simplest-dapp"},next:{title:"A  DApp demo:  Felix bot",permalink:"/implement-dapp-docs/felixbot-dapp"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Set up the Configuration for Lumos",id:"set-up-the-configuration-for-lumos",children:[{value:"<strong>Step1: Set up the Config Manager</strong>",id:"step1-set-up-the-config-manager",children:[]},{value:"Step2: Set Up the Lumos Indexer",id:"step2-set-up-the-lumos-indexer",children:[]}]},{value:"Build the Transfer  Transaction",id:"build-the-transfer--transaction",children:[{value:"Step1: Create a transaction skeleton",id:"step1-create-a-transaction-skeleton",children:[]},{value:"Step2: Add the transaction fee",id:"step2-add-the-transaction-fee",children:[]},{value:"Step3: Prepare the signing entries",id:"step3-prepare-the-signing-entries",children:[]},{value:"Step4: Sign the transaction",id:"step4-sign-the-transaction",children:[]},{value:"Step5: Seal the  transaction",id:"step5-seal-the--transaction",children:[]},{value:"Step6: Send the finalized transaction to the CKB network",id:"step6-send-the-finalized-transaction-to-the-ckb-network",children:[]},{value:"\u603b\u7ed3\u6574\u4e2a workflow \uff1a",id:"\u603b\u7ed3\u6574\u4e2a-workflow-",children:[]}]},{value:"\u601d\u8003",id:"\u601d\u8003",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"a-transfer-tx--dapp-demo"},"A transfer-tx  DApp demo"),(0,o.kt)("p",null,"\u53ef\u80fd\u4f60\u4f1a\u6709\u987e\u8651\uff0c\u867d\u7136\u5df2\u7ecf\u7406\u89e3\u4e86 CKB \u7684\u4ea4\u6613\uff0c\u53ef\u662f\u8fd9\u4e48\u590d\u6742\u7684\u4ea4\u6613\u5fc5\u987b\u624b\u52a8\u62fc\u51fa\u6765\u5417\uff1f\n\u5f53\u7136\u4e0d\u662f\uff01\u624b\u52a8\u62fc\u4ea4\u6613\u53ea\u662f\u5176\u4e2d\u7684\u4e00\u79cd\u65b9\u5f0f\uff0cCKB \u56e2\u961f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u597d\u7528\u7684\u5de5\u5177 Lumos\uff0c\u53ef\u4ee5\u5e2e\u52a9\u81ea\u52a8\u6784\u5efa\u4ea4\u6613\uff0c\u5728 Call RPC interface to get blockchain info  \u5df2\u7ecf\u4f53\u9a8c\u4e86 Lumos  rpc component(package)\uff0cThe transfer-tx DApp demo is based on Lumos functionalities to implement the most basic functions\uff0c\u63a5\u4e0b\u6765\u4f1a\u4e86\u89e3\u5230 lumos \u66f4\u591a\u529f\u80fd\u3002"),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8bf7\u53c2\u8003 ",(0,o.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/preparation/setupsystem"},"Set Up the Development Environment"),"  \u6839\u636e\u4f60\u7684 Operating System \u914d\u7f6e\u5f00\u53d1\u73af\u5883\u3002"),(0,o.kt)("li",{parentName:"ul"},"Prepare two CKB accounts, Alice and Bob, that will be used in the accounts.js file in the later transfer-tx DApp demo example, see ",(0,o.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/preparation/createaccount"},"Create Accounts"),". "),(0,o.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e Alice \u4f5c\u4e3a DevChain \u7684 miner to get capacity, see ",(0,o.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/reference/ckbaccount#step-5-get-ckb-capacity-for-the-account-of-alice"},"Step 5. Get CKB capacity for the account of Alice")," ,\u540c\u65f6 Alice \u4e5f\u662f\u8f6c\u8d26\u4ea4\u6613\u7684\u53d1\u9001\u65b9\uff0cBob \u4f5c\u4e3a\u63a5\u6536\u65b9"),(0,o.kt)("li",{parentName:"ul"},"\u66f4\u65b0 accounts.js ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/accounts.js\n\nconst ALICE = {\n    PRIVATE_KEY:`${ALICE's private_key}`,\n    ADDRESS:`${ALICE's private_key}`,\n    ARGS:`${ALICE's args}`\n}\n\nconst BOB = {\n    PRIVATE_KEY:`${BOB's private_key}`,\n    ADDRESS:`${BOB's private_key}`,\n    ARGS:`${BOB's args}`\n}\n\nmodule.exports = {\n    ALICE,\n    BOB,\n}\n")),(0,o.kt)("h2",{id:""}),(0,o.kt)("h2",{id:"set-up-the-configuration-for-lumos"},"Set up the Configuration for Lumos"),(0,o.kt)("h3",{id:"step1-set-up-the-config-manager"},(0,o.kt)("strong",{parentName:"h3"},"Step1: Set up the Config Manager")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Generate the config.json file for the DEV chain, see",(0,o.kt)("a",{parentName:"strong",href:"https://cryptape.github.io/lumos-doc/docs/guides/config#set-up-the-config-manager-by-using-a-local-config-file"},"Set Up the Config Manager by Using a Local Config File"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"TroubleShooting:")," "),(0,o.kt)("p",null,"macOS \u5347\u7ea7\u5230Catalina 10.15\u540e\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u62a5\u9519\u6267\u884c\u4e8c\u8fdb\u5236\u6587\u4ef6\u62a5\u9519 "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dyld: malformed mach-o image: segment __DWARF has vmsize < filesize\n[1] 35570 abort ./lumos-config-generator config.json\n\n")),(0,o.kt)("p",null,"\u7f16\u8bd1\u7684\u65f6\u5019\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"p"},'go build -ldflags "-w"')," \u8fd9\u79cd\u65b9\u5f0f\u7f16\u8bd1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ git clone https://github.com/classicalliu/lumos-config-generator.git\n$ cd lumos-config-generator\n$ go build -ldflags "-w" \n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Set up the config manager")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/config-manager"),".  The config manager component (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/config-manager"),") deals with differences between chains, such as the Mainnet, Testnet, or numerous DEV chains. Each chain is abstracted into an individual configuration file.\nWhen a configuration file is loaded, the config manager processes the chain specific logic, sparing the corresponding coding work for configuration management."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @ckb-lumos/config-manager\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const { initializeConfig, getConfig } = require(\"@ckb-lumos/config-manager\");\nprocess.env.LUMOS_CONFIG_FILE = process.env.LUMOS_CONFIG_FILE || './config.json'\ninitializeConfig();\nconst CKB_CONFIG = getConfig();\n\n")),(0,o.kt)("h3",{id:"step2-set-up-the-lumos-indexer"},"Step2: Set Up the Lumos Indexer"),(0,o.kt)("p",null," Use ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/indexer"),", see ",(0,o.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/guides/indexer"},"Set Up the Lumos Indexer")," The Lumos indexer (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/indexer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/sql-indexer"),") is a CKB cell indexer that fulfills the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"},"Index-Query-Assemble")," pattern. The Lumos indexer indexes cells and maintains a local database of the cells that provides an optimal way for querying cells."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add @ckb-lumos/indexer\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'const {Indexer} = require("@ckb-lumos/indexer");\nconst CKB_RPC_URI = process.env.CKB_RPC_URI || "http://127.0.0.1:8114";\nconst CKB_INDEXER_DATA = process.env.CKB_INDEXER_DATA || "./indexer-data";\nconst indexer = new Indexer(CKB_RPC_URI, CKB_INDEXER_DATA);\nindexer.startForever();\n\n')),(0,o.kt)("h2",{id:"build-the-transfer--transaction"},"Build the Transfer  Transaction"),(0,o.kt)("p",null,"A transaction, at its core, really just consumes some cells, and create another set of cells. As a result, the ability to locate and transform cells, plays a critical role in building any CKB dapps, which leads to the ",(0,o.kt)("inlineCode",{parentName:"p"},"index-query-assemble")," pattern, see ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"},"Index-Query-Assemble Pattern"),". Lumos was designed on the basis of the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/reference/cell#index-query-assemble-pattern"},"Index-Query-Assemble")," pattern. \u5728Step3 \u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86  lumos indexer, \u73b0\u5728\u5f00\u59cb query and assemble cells to build transfer transaction."),(0,o.kt)("h3",{id:"step1-create-a-transaction-skeleton"},"Step1: Create a transaction skeleton"),(0,o.kt)("p",null,"Use ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#transfer-10"},"transfer")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts")," and",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#transactionskeleton"},"TransactionSkeleton")," in  ",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers")),(0,o.kt)("p",null,"The common scripts component (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/common-scripts"),") integrates known scripts on CKB. The scripts use a cell provider (the Lumos indexer ) to collect cells and assemble transactions. Each script implements a specific ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionSkeleton")," for building transactions that forms a unified workflow for transaction generation."),(0,o.kt)("p",null,"The helpers component (",(0,o.kt)("inlineCode",{parentName:"p"},"@ckb-lumos/helpers"),") defines interfaces, types and utilities that require to work under a CKB network. The network, testnet or mainnet, is specified by the config manager."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ yarn add @ckb-lumos/common-scripts\n$ yarn add @ckb-lumos/helpers\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"const {common} = require('@ckb-lumos/common-scripts');\nconst {TransactionSkeleton} = require(\"@ckb-lumos/helpers\");\n\nconst SHANNONS = BigInt(100000000);\nconst AMOUNT = BigInt(process.env.AMOUNT || 500)*SHANNONS; // transfer balance\n\nconst fromInfos = [\n        ALICE.ADDRESS,\n        {\n        R: 0,\n        M: 1,\n        publicKeyHashes: [ALICE.ARGS],\n    },\n    ]\n\n    let txSkeleton = TransactionSkeleton({ cellProvider: indexer });\n\n    const tipheader = await CKB_RPC.get_tip_header();\n    \n    txSkeleton = await common.transfer(\n        txSkeleton,\n        fromInfos,\n        BOB.ADDRESS,\n        BigInt(AMOUNT),\n        undefined,\n        tipheader\n    );\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"About transfer balance  ",(0,o.kt)("inlineCode",{parentName:"li"},"AMONT:"),"  \u7531\u4e8e Cell \u81ea\u8eab\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"capacity"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"lock script"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"type script"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," \u56db\u4e2a\u5b57\u6bb5\uff0c\u672c\u8eab\u4e5f\u4f1a\u5360\u636e\u7a7a\u95f4\uff0c\u6240\u4ee5\u6784\u5efa\u4e00\u4e2a Cell \u6700\u5c11\u9700\u8981 61 CKB\uff0c\u5982\u679c\u4e0d\u8db361 CKB \u5219\u4f1a\u62a5\u9519 InsufficientCellCapacity, \u6240\u4ee5\u8bbe\u7f6e\u8f6c\u8d26\u91d1\u989d ",(0,o.kt)("inlineCode",{parentName:"li"},"AMOUNT")," \u65f6\u4e00\u5b9a\u4e0d\u4f4e\u4e8e 61 CKB\u3002")),(0,o.kt)("p",null,"InsufficientCellCapacity error: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'(node:82255) UnhandledPromiseRejectionWarning: Error: JSONRPCError: server error {"code":-302,"message":"TransactionFailedToVerify: Verification failed Transaction(InsufficientCellCapacity(Outputs[0]): expected occupied capacity (0x16b969d00) <= capacity (0x165a0bc00))","data":"Verification(Error { kind: Transaction, inner: InsufficientCellCapacity(Outputs[0]): expected occupied capacity (0x16b969d00) <= capacity (0x165a0bc00) })"}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"About ",(0,o.kt)("inlineCode",{parentName:"li"},"SHANNONS:"),"  CKB capacity \u7684\u6700\u5c0f\u5355\u4f4d\u662f shannon , 1 CKB = 100000000 shannon   \u5c31\u50cf 1 bitcoin = 100000000 satoshi"),(0,o.kt)("li",{parentName:"ul"},"About ",(0,o.kt)("inlineCode",{parentName:"li"},"fromInfos:"),"  lumos supports gathering input cells from singe or multiple accounts as a single unit by using the ",(0,o.kt)("inlineCode",{parentName:"li"},"fromInfos")," parameter.  see Constructor section in ",(0,o.kt)("a",{parentName:"li",href:"https://cryptape.github.io/lumos-doc/docs/guides/buildtransactions#transfer-ckb-in-a-common-transaction"},"Transfer CKB in a Common Transaction")," \u8fd9\u91cc\u5904\u7406\u7684\u662f\u5355\u7b7e\u7684\u60c5\u51b5\uff0c\u6240\u4ee5  ",(0,o.kt)("inlineCode",{parentName:"li"},"R:0 M:1"))),(0,o.kt)("h3",{id:"step2-add-the-transaction-fee"},"Step2: Add the transaction fee"),(0,o.kt)("p",null,"\u4f7f\u7528 @ckb-lumos/common-scripts \u4e2d\u7684 ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#payfeebyfeerate-2"},"payFeeByFeeRate")," \uff0c\u53ef\u4ee5\u8f93\u5165 FEE_RATE \u5b9e\u73b0\u52a8\u6001\u8bbe\u7f6e tx_fee"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," const FEE_RATE = BigInt(process.env.FEE_RATE || 1000);\n txSkeleton = await common.payFeeByFeeRate(\n        txSkeleton,\n        fromInfos,\n        FEE_RATE,\n        tipheader\n    );\n")),(0,o.kt)("h3",{id:"step3-prepare-the-signing-entries"},"Step3: Prepare the signing entries"),(0,o.kt)("p",null,"\u4f7f\u7528 @ckb-lumos/common-scripts \u4e2d\u7684 ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/common_scripts.html#preparesigningentries-12"},"prepareSigningEntries")," to add the signing entries to the transaction skeleton. The result is a raw transaction that requires signatures."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"txSkeleton = common.prepareSigningEntries(txSkeleton);\n")),(0,o.kt)("h3",{id:"step4-sign-the-transaction"},"Step4: Sign the transaction"),(0,o.kt)("p",null," uses the ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/hd.html#signrecoverable-3"},"key.signRecoverable")," function of the HD wallet manager (@ckb-lumos/hd) package to generate a signature based on the private key and signing message.  "),(0,o.kt)("p",null," CKB \u4e2d depending on sources of data, we might get values in different formats: Hex string might be provided in CKB RPC responses ,\u4e3a\u4e86\u628a message \u8f6c\u6362\u6210 hex message, \u8fd9\u91cc\u8981\u7528\u5230 ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#reader"},"Reader class")," in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/ckb-js-toolkit#reader"},"ckb-js-toolkit")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ yarn add ckb-js-toolkit\n$ yarn add ckb-lumos/hd\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    const {Reader} = require("ckb-js-toolkit");\n    const { key } = require("@ckb-lumos/hd");\n    \n    const message = txSkeleton\n    .get("signingEntries")\n    .map((e) => {\n    const lock = txSkeleton.get("inputs").get(e.index).cell_output.lock;\n    return `${e.message}`\n    }).toArray().toString(); \n    \n    const hexmessage = new Reader(message).serializeJson();\n    const signature = key.signRecoverable(hexmessage, ALICE.PRIVATE_KEY);\n')),(0,o.kt)("h3",{id:"step5-seal-the--transaction"},"Step5: Seal the  transaction"),(0,o.kt)("p",null,"\u4f7f\u7528 ",(0,o.kt)("a",{parentName:"p",href:"https://nervosnetwork.github.io/lumos/modules/helpers.html#sealtransaction"},"sealTransaction")," @ckb-lumos/helpers \u6700\u7ec8\u628a\u751f\u6210\u7684 signature \u6dfb\u52a0\u5230 witness\uff0cthe transaction  build \u5b8c\u6210\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    const {sealTransaction} = require("@ckb-lumos/helpers");\n    \n    const tx = sealTransaction(txSkeleton, [signature]);\n    console.log(JSON.stringify(tx,null,2))\n\n')),(0,o.kt)("h3",{id:"step6-send-the-finalized-transaction-to-the-ckb-network"},"Step6: Send the finalized transaction to the CKB network"),(0,o.kt)("p",null,"\u8fd8\u8bb0\u5f97\u6211\u4eec\u6700\u5f00\u59cb\u4f7f\u7528 @ckb-lumos/rpc \u8bf7\u6c42 blockchain info \u5417\uff1fsee Connect to CKB node through RPC \u6ca1\u9519\uff0c\u8fd9\u6b21\u7528\u6765 send the transaction  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ yarn add @ckb-lumos/rpc\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'const { RPC } = require("@ckb-lumos/rpc");\n\nconst CKB_RPC_URI = process.env.CKB_RPC_URI || "http://localhost:8114";\nconst rpc = new RPC(CKB_RPC_URI);\nconst hash = await rpc.send_transaction(tx);\nconsole.log(\'The transaction hash is:\', hash);\n')),(0,o.kt)("p",null,"A transaction hash output example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"The transaction hash is: 0xbbab8ff0e8609fca7a7bbfb8112a13027058d38b740d67db191f95ee34f3a8c1\n")),(0,o.kt)("h3",{id:"\u603b\u7ed3\u6574\u4e2a-workflow-"},"\u603b\u7ed3\u6574\u4e2a workflow \uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set up the Configuration for Lumos",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Step1: Set up the Config Manager"),(0,o.kt)("li",{parentName:"ul"},"Step2: Set up the Lumos Indexer"))),(0,o.kt)("li",{parentName:"ul"},"Build the Transfer Transaction",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Step1:Create a transaction skeleton"),(0,o.kt)("li",{parentName:"ul"},"Step2: Add the transaction fee"),(0,o.kt)("li",{parentName:"ul"},"Step3: Prepare the signing entries "),(0,o.kt)("li",{parentName:"ul"},"Step4: Sign the transaction"),(0,o.kt)("li",{parentName:"ul"},"Step5: Seal the transaction"),(0,o.kt)("li",{parentName:"ul"},"Step6: Send the finalized transaction to the CKB network")))),(0,o.kt)("p",null,"\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86 Lumos \u7684 \u51e0\u4e4e\u6240\u6709\u5e38\u7528 component\uff08packages\uff09\uff0c see  ",(0,o.kt)("a",{parentName:"p",href:"https://cryptape.github.io/lumos-doc/docs/introduction/lumoscomponents"},"Lumos Components (Packages)")," , \u56de\u987e\u521a\u624d\u7684 code sample, \u662f\u4e0d\u662f\u66f4\u52a0\u7406\u89e3 lumos \u7684\u529f\u80fd\u4e86\u3002"),(0,o.kt)("h2",{id:"\u601d\u8003"},"\u601d\u8003"),(0,o.kt)("p",null,"\u5982\u679c\u6709\u5bf9\u4ee5\u592a\u574a\u4e86\u89e3\u7684\u670b\u53cb\uff0c\u662f\u5426\u53d1\u73b0\u4e86 CKB \u4e0e \u4ee5\u592a\u574a \u7f16\u7a0b\u6a21\u578b\u7684\u4e0d\u540c\u4e4b\u5904\u5462\uff1f"),(0,o.kt)("p",null,"Ethereum \u7684 DApps \u4e2d\uff0c\u4ea4\u6613\u91cc\u5305\u542b calldata \u548c smart contract\uff0c\u4ea4\u6613\u63d0\u4ea4\u4e0a\u94fe\u540e\uff0c\u94fe\u4e0a\u7684 EVM \u6267\u884c\u4ea4\u6613\uff0c\u90e8\u7f72\u5e76\u6267\u884c\u667a\u80fd\u5408\u7ea6\u540e\uff0c\u8d26\u6237\u7684\u5408\u7ea6\u6570\u636e\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684world state\u3002\u4e5f\u5c31\u662f\u8bf4\u94fe\u4e0a\u72b6\u6001\u5728 EVM \u6267\u884c\u8fc7\u4ea4\u6613\u4e4b\u540e\u624d\u80fd\u786e\u5b9a\u3002"),(0,o.kt)("p",null,"DApps on CKB layer1 separate the generation and verification of state. The state can be generated offline and verified online, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0002-ckb/0002-ckb.md#41-state-generation-and-verification"},"State Generation and Verification"),". \u5b9e\u9645\u4e0a\u94fe\u4e0b\u6784\u5efa\u5b8c\u4ea4\u6613\u4e4b\u540e\uff0c\u94fe\u4e0a\u72b6\u6001\u5df2\u7ecf\u901a\u8fc7\u4ea4\u6613\u7684 output \u786e\u5b9a\u4e86\uff0c\u94fe\u4e0a\u53ea\u662f\u5bf9\u4ea4\u6613\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4e0d\u4f1a\u6539\u53d8\u4ea4\u6613\u7ed3\u679c\uff0c\u5e76\u4e0d\u50cf Ethereum , \u94fe\u4e0a\u9700\u8981\u6267\u884c\u5b8c\u4ea4\u6613\u540e\u624d\u80fd\u786e\u5b9a\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u6709\u672c\u8d28\u533a\u522b\u7684\u3002"),(0,o.kt)("p",null,"\u8fd9\u4e5f\u662f Lumos \u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u4e3a The state can be generated offline\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u5728\u94fe\u4e0b\u901a\u8fc7 lumos build transactions ( Step5: Seal the  transaction- the transaction is already built. ), \u6700\u7ec8\u518d send the transaction to the CKB network."),(0,o.kt)("p",null,"\u4e0d\u8fc7\u8fd9\u662f\u5426\u610f\u5473\u7740 Ethereum dApp \u5f00\u53d1\u8005\u5982\u679c\u60f3\u5728 CKB \u4e0a\u5f00\u53d1\uff0c\u5c31\u5fc5\u987b\u8981\u629b\u5f03\u4e4b\u524d\u7684\u5f00\u53d1\u4e60\u60ef\uff0c\u5b66\u4e60\u4e00\u5957\u65b0\u7684\u7f16\u7a0b\u6a21\u578b\u548c\u5de5\u5177\u5462\uff1f\n\u5f53\u7136\u4e0d\u662f\uff01\u539f\u56e0\u4f1a\u5728 To be Continued \u63ed\u6653~"))}d.isMDXComponent=!0}}]);